{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Copyright (c) Microsoft Corporation. All rights reserved.  \n",
        "Licensed under the MIT License."
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "![Impressions](https://PixelServer20190423114238.azurewebsites.net/api/impressions/NotebookVM/how-to-use-azureml/machine-learning-pipelines/intro-to-pipelines/aml-pipelines-with-automated-machine-learning-step.png)"
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Azure Machine Learning Pipeline with AutoMLStep (Udacity Course 2)\n",
        "This notebook demonstrates the use of AutoMLStep in Azure Machine Learning Pipeline."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install --upgrade typing-extensions\n",
        "!pip install Jinja2"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Requirement already up-to-date: typing-extensions in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (4.12.2)\nRequirement already satisfied: Jinja2 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (2.11.2)\nRequirement already satisfied: MarkupSafe>=0.23 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from Jinja2) (2.0.1)\n"
        }
      ],
      "execution_count": 4,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Introduction\n",
        "In this example we showcase how you can use AzureML Dataset to load data for AutoML via AML Pipeline. \n",
        "\n",
        "If you are using an Azure Machine Learning Notebook VM, you are all set. Otherwise, make sure you have executed the [configuration](https://aka.ms/pl-config) before running this notebook.\n",
        "\n",
        "In this notebook you will learn how to:\n",
        "1. Create an `Experiment` in an existing `Workspace`.\n",
        "2. Create or Attach existing AmlCompute to a workspace.\n",
        "3. Define data loading in a `TabularDataset`.\n",
        "4. Configure AutoML using `AutoMLConfig`.\n",
        "5. Use AutoMLStep\n",
        "6. Train the model using AmlCompute\n",
        "7. Explore the results.\n",
        "8. Test the best fitted model."
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Azure Machine Learning and Pipeline SDK-specific imports"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import logging\n",
        "import os\n",
        "import csv\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn import datasets\n",
        "import pkg_resources\n",
        "\n",
        "import azureml.core\n",
        "from azureml.core.experiment import Experiment\n",
        "from azureml.core.workspace import Workspace\n",
        "from azureml.train.automl import AutoMLConfig\n",
        "from azureml.core.dataset import Dataset\n",
        "\n",
        "from azureml.pipeline.steps import AutoMLStep\n",
        "\n",
        "# Check core SDK version number\n",
        "print(\"SDK version:\", azureml.core.VERSION)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "SDK version: 1.51.0\n"
        }
      ],
      "execution_count": 5,
      "metadata": {
        "gather": {
          "logged": 1718525158989
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Initialize Workspace\n",
        "Initialize a workspace object from persisted configuration. Make sure the config file is present at .\\config.json"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "ws = Workspace.from_config()\n",
        "print(ws.name, ws.resource_group, ws.location, ws.subscription_id, sep = '\\n')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "quick-starts-ws-260718\naml-quickstarts-260718\nwesteurope\nf9d5a085-54dc-4215-9ba6-dad5d86e60a0\n"
        }
      ],
      "execution_count": 6,
      "metadata": {
        "gather": {
          "logged": 1718525163618
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Create an Azure ML experiment\n",
        "Let's create an experiment named \"automlstep-classification\" and a folder to hold the training scripts. The script runs will be recorded under the experiment in Azure.\n",
        "\n",
        "The best practice is to use separate folders for scripts and its dependent files for each step and specify that folder as the `source_directory` for the step. This helps reduce the size of the snapshot created for the step (only the specific folder is snapshotted). Since changes in any files in the `source_directory` would trigger a re-upload of the snapshot, this helps keep the reuse of the step when there are no changes in the `source_directory` of the step.\n",
        "\n",
        "*Udacity Note:* There is no need to create an Azure ML experiment, this needs to re-use the experiment that was already created\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Choose a name for the run history container in the workspace.\n",
        "# NOTE: update these to match your existing experiment name\n",
        "experiment_name = 'ml-experiment-1'\n",
        "project_folder = './pipeline-project'\n",
        "\n",
        "experiment = Experiment(ws, experiment_name)\n",
        "experiment"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 7,
          "data": {
            "text/plain": "Experiment(Name: ml-experiment-1,\nWorkspace: quick-starts-ws-260718)",
            "text/html": "<table style=\"width:100%\"><tr><th>Name</th><th>Workspace</th><th>Report Page</th><th>Docs Page</th></tr><tr><td>ml-experiment-1</td><td>quick-starts-ws-260718</td><td><a href=\"https://ml.azure.com/experiments/id/a4f050d1-2e2d-4224-b3b9-3dc712d73169?wsid=/subscriptions/f9d5a085-54dc-4215-9ba6-dad5d86e60a0/resourcegroups/aml-quickstarts-260718/workspaces/quick-starts-ws-260718&amp;tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td><td><a href=\"https://docs.microsoft.com/en-us/python/api/azureml-core/azureml.core.experiment.Experiment?view=azure-ml-py\" target=\"_blank\" rel=\"noopener\">Link to Documentation</a></td></tr></table>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 7,
      "metadata": {
        "gather": {
          "logged": 1718525172215
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Create or Attach an AmlCompute cluster\n",
        "You will need to create a [compute target](https://docs.microsoft.com/azure/machine-learning/service/concept-azure-machine-learning-architecture#compute-target) for your AutoML run. In this tutorial, you get the default `AmlCompute` as your training compute resource.\n",
        "\n",
        "**Udacity Note** There is no need to create a new compute target, it can re-use the previous cluster"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.compute import AmlCompute\n",
        "from azureml.core.compute import ComputeTarget\n",
        "from azureml.core.compute_target import ComputeTargetException\n",
        "\n",
        "# NOTE: update the cluster name to match the existing cluster\n",
        "# Choose a name for your CPU cluster\n",
        "amlcompute_cluster_name = \"auto-ml\"\n",
        "\n",
        "# Verify that cluster does not exist already\n",
        "try:\n",
        "    compute_target = ComputeTarget(workspace=ws, name=amlcompute_cluster_name)\n",
        "    print('Found existing cluster, use it.')\n",
        "except ComputeTargetException:\n",
        "    compute_config = AmlCompute.provisioning_configuration(vm_size='STANDARD_D2_V2',# for GPU, use \"STANDARD_NC6\"\n",
        "                                                           #vm_priority = 'lowpriority', # optional\n",
        "                                                           max_nodes=4)\n",
        "    compute_target = ComputeTarget.create(ws, amlcompute_cluster_name, compute_config)\n",
        "\n",
        "compute_target.wait_for_completion(show_output=True, min_node_count = 1, timeout_in_minutes = 10)\n",
        "# For a more detailed view of current AmlCompute status, use get_status()."
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "InProgress....\nSucceededProvisioning operation finished, operation \"Succeeded\"\nSucceeded.....................................................................................................................\nAmlCompute wait for completion finished\n\nWait timeout has been reached\nCurrent provisioning state of AmlCompute is \"Succeeded\" and current node count is \"0\"\n"
        }
      ],
      "execution_count": 8,
      "metadata": {
        "gather": {
          "logged": 1718525906457
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data\n",
        "\n",
        "**Udacity note:** Make sure the `key` is the same name as the dataset that is uploaded, and that the description matches. If it is hard to find or unknown, loop over the `ws.datasets.keys()` and `print()` them.\n",
        "If it *isn't* found because it was deleted, it can be recreated with the link that has the CSV "
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Try to load the dataset from the Workspace. Otherwise, create it from the file\n",
        "# NOTE: update the key to match the dataset name\n",
        "found = False\n",
        "key = \"BankMarketing Dataset\"\n",
        "description_text = \"Bank Marketing DataSet for Udacity Course 2\"\n",
        "\n",
        "if key in ws.datasets.keys(): \n",
        "        found = True\n",
        "        dataset = ws.datasets[key] \n",
        "\n",
        "if not found:\n",
        "        # Create AML Dataset and register it into Workspace\n",
        "        example_data = 'https://automlsamplenotebookdata.blob.core.windows.net/automl-sample-notebook-data/bankmarketing_train.csv'\n",
        "        dataset = Dataset.Tabular.from_delimited_files(example_data)        \n",
        "        #Register Dataset in Workspace\n",
        "        dataset = dataset.register(workspace=ws,\n",
        "                                   name=key,\n",
        "                                   description=description_text)\n",
        "\n",
        "\n",
        "df = dataset.to_pandas_dataframe()\n",
        "df.describe()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 9,
          "data": {
            "text/plain": "                age      duration      campaign         pdays      previous  \\\ncount  32950.000000  32950.000000  32950.000000  32950.000000  32950.000000   \nmean      40.040212    257.335205      2.561730    962.174780      0.174780   \nstd       10.432313    257.331700      2.763646    187.646785      0.496503   \nmin       17.000000      0.000000      1.000000      0.000000      0.000000   \n25%       32.000000    102.000000      1.000000    999.000000      0.000000   \n50%       38.000000    179.000000      2.000000    999.000000      0.000000   \n75%       47.000000    318.000000      3.000000    999.000000      0.000000   \nmax       98.000000   4918.000000     56.000000    999.000000      7.000000   \n\n       emp.var.rate  cons.price.idx  cons.conf.idx     euribor3m   nr.employed  \ncount  32950.000000    32950.000000   32950.000000  32950.000000  32950.000000  \nmean       0.076228       93.574243     -40.518680      3.615654   5166.859608  \nstd        1.572242        0.578636       4.623004      1.735748     72.208448  \nmin       -3.400000       92.201000     -50.800000      0.634000   4963.600000  \n25%       -1.800000       93.075000     -42.700000      1.344000   5099.100000  \n50%        1.100000       93.749000     -41.800000      4.857000   5191.000000  \n75%        1.400000       93.994000     -36.400000      4.961000   5228.100000  \nmax        1.400000       94.767000     -26.900000      5.045000   5228.100000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>duration</th>\n      <th>campaign</th>\n      <th>pdays</th>\n      <th>previous</th>\n      <th>emp.var.rate</th>\n      <th>cons.price.idx</th>\n      <th>cons.conf.idx</th>\n      <th>euribor3m</th>\n      <th>nr.employed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>40.040212</td>\n      <td>257.335205</td>\n      <td>2.561730</td>\n      <td>962.174780</td>\n      <td>0.174780</td>\n      <td>0.076228</td>\n      <td>93.574243</td>\n      <td>-40.518680</td>\n      <td>3.615654</td>\n      <td>5166.859608</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>10.432313</td>\n      <td>257.331700</td>\n      <td>2.763646</td>\n      <td>187.646785</td>\n      <td>0.496503</td>\n      <td>1.572242</td>\n      <td>0.578636</td>\n      <td>4.623004</td>\n      <td>1.735748</td>\n      <td>72.208448</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>17.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>-3.400000</td>\n      <td>92.201000</td>\n      <td>-50.800000</td>\n      <td>0.634000</td>\n      <td>4963.600000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>32.000000</td>\n      <td>102.000000</td>\n      <td>1.000000</td>\n      <td>999.000000</td>\n      <td>0.000000</td>\n      <td>-1.800000</td>\n      <td>93.075000</td>\n      <td>-42.700000</td>\n      <td>1.344000</td>\n      <td>5099.100000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>38.000000</td>\n      <td>179.000000</td>\n      <td>2.000000</td>\n      <td>999.000000</td>\n      <td>0.000000</td>\n      <td>1.100000</td>\n      <td>93.749000</td>\n      <td>-41.800000</td>\n      <td>4.857000</td>\n      <td>5191.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>47.000000</td>\n      <td>318.000000</td>\n      <td>3.000000</td>\n      <td>999.000000</td>\n      <td>0.000000</td>\n      <td>1.400000</td>\n      <td>93.994000</td>\n      <td>-36.400000</td>\n      <td>4.961000</td>\n      <td>5228.100000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>98.000000</td>\n      <td>4918.000000</td>\n      <td>56.000000</td>\n      <td>999.000000</td>\n      <td>7.000000</td>\n      <td>1.400000</td>\n      <td>94.767000</td>\n      <td>-26.900000</td>\n      <td>5.045000</td>\n      <td>5228.100000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 9,
      "metadata": {
        "gather": {
          "logged": 1718525906645
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Review the Dataset Result\n",
        "\n",
        "You can peek the result of a TabularDataset at any range using `skip(i)` and `take(j).to_pandas_dataframe()`. Doing so evaluates only `j` records for all the steps in the TabularDataset, which makes it fast even against large datasets.\n",
        "\n",
        "`TabularDataset` objects are composed of a list of transformation steps (optional)."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.take(5).to_pandas_dataframe()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 10,
          "data": {
            "text/plain": "   age          job  marital    education  default housing loan    contact  \\\n0   57   technician  married  high.school       no      no  yes   cellular   \n1   55      unknown  married      unknown  unknown     yes   no  telephone   \n2   33  blue-collar  married     basic.9y       no      no   no   cellular   \n3   36       admin.  married  high.school       no      no   no  telephone   \n4   27    housemaid  married  high.school       no     yes   no   cellular   \n\n  month day_of_week  ...  campaign  pdays  previous     poutcome emp.var.rate  \\\n0   may         mon  ...         1    999         1      failure         -1.8   \n1   may         thu  ...         2    999         0  nonexistent          1.1   \n2   may         fri  ...         1    999         1      failure         -1.8   \n3   jun         fri  ...         4    999         0  nonexistent          1.4   \n4   jul         fri  ...         2    999         0  nonexistent          1.4   \n\n   cons.price.idx  cons.conf.idx  euribor3m  nr.employed   y  \n0          92.893          -46.2      1.299       5099.1  no  \n1          93.994          -36.4      4.860       5191.0  no  \n2          92.893          -46.2      1.313       5099.1  no  \n3          94.465          -41.8      4.967       5228.1  no  \n4          93.918          -42.7      4.963       5228.1  no  \n\n[5 rows x 21 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>job</th>\n      <th>marital</th>\n      <th>education</th>\n      <th>default</th>\n      <th>housing</th>\n      <th>loan</th>\n      <th>contact</th>\n      <th>month</th>\n      <th>day_of_week</th>\n      <th>...</th>\n      <th>campaign</th>\n      <th>pdays</th>\n      <th>previous</th>\n      <th>poutcome</th>\n      <th>emp.var.rate</th>\n      <th>cons.price.idx</th>\n      <th>cons.conf.idx</th>\n      <th>euribor3m</th>\n      <th>nr.employed</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>57</td>\n      <td>technician</td>\n      <td>married</td>\n      <td>high.school</td>\n      <td>no</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>cellular</td>\n      <td>may</td>\n      <td>mon</td>\n      <td>...</td>\n      <td>1</td>\n      <td>999</td>\n      <td>1</td>\n      <td>failure</td>\n      <td>-1.8</td>\n      <td>92.893</td>\n      <td>-46.2</td>\n      <td>1.299</td>\n      <td>5099.1</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>55</td>\n      <td>unknown</td>\n      <td>married</td>\n      <td>unknown</td>\n      <td>unknown</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>telephone</td>\n      <td>may</td>\n      <td>thu</td>\n      <td>...</td>\n      <td>2</td>\n      <td>999</td>\n      <td>0</td>\n      <td>nonexistent</td>\n      <td>1.1</td>\n      <td>93.994</td>\n      <td>-36.4</td>\n      <td>4.860</td>\n      <td>5191.0</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>33</td>\n      <td>blue-collar</td>\n      <td>married</td>\n      <td>basic.9y</td>\n      <td>no</td>\n      <td>no</td>\n      <td>no</td>\n      <td>cellular</td>\n      <td>may</td>\n      <td>fri</td>\n      <td>...</td>\n      <td>1</td>\n      <td>999</td>\n      <td>1</td>\n      <td>failure</td>\n      <td>-1.8</td>\n      <td>92.893</td>\n      <td>-46.2</td>\n      <td>1.313</td>\n      <td>5099.1</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>36</td>\n      <td>admin.</td>\n      <td>married</td>\n      <td>high.school</td>\n      <td>no</td>\n      <td>no</td>\n      <td>no</td>\n      <td>telephone</td>\n      <td>jun</td>\n      <td>fri</td>\n      <td>...</td>\n      <td>4</td>\n      <td>999</td>\n      <td>0</td>\n      <td>nonexistent</td>\n      <td>1.4</td>\n      <td>94.465</td>\n      <td>-41.8</td>\n      <td>4.967</td>\n      <td>5228.1</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>27</td>\n      <td>housemaid</td>\n      <td>married</td>\n      <td>high.school</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>cellular</td>\n      <td>jul</td>\n      <td>fri</td>\n      <td>...</td>\n      <td>2</td>\n      <td>999</td>\n      <td>0</td>\n      <td>nonexistent</td>\n      <td>1.4</td>\n      <td>93.918</td>\n      <td>-42.7</td>\n      <td>4.963</td>\n      <td>5228.1</td>\n      <td>no</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 10,
      "metadata": {
        "gather": {
          "logged": 1718525906779
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Train\n",
        "This creates a general AutoML settings object.\n",
        "**Udacity notes:** These inputs must match what was used when training in the portal. `label_column_name` has to be `y` for example."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "automl_settings = {\n",
        "    \"experiment_timeout_minutes\": 20,\n",
        "    \"max_concurrent_iterations\": 5,\n",
        "    \"primary_metric\" : 'AUC_weighted'\n",
        "}\n",
        "automl_config = AutoMLConfig(compute_target=compute_target,\n",
        "                             task = \"classification\",\n",
        "                             training_data=dataset,\n",
        "                             label_column_name=\"y\",   \n",
        "                             path = project_folder,\n",
        "                             enable_early_stopping= True,\n",
        "                             featurization= 'auto',\n",
        "                             debug_log = \"automl_errors.log\",\n",
        "                             enable_onnx_compatible_models=True,\n",
        "                             **automl_settings\n",
        "                            )"
      ],
      "outputs": [],
      "execution_count": 11,
      "metadata": {
        "gather": {
          "logged": 1718525906899
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Create Pipeline and AutoMLStep\n",
        "\n",
        "You can define outputs for the AutoMLStep using TrainingOutput."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.core import PipelineData, TrainingOutput\n",
        "\n",
        "ds = ws.get_default_datastore()\n",
        "metrics_output_name = 'metrics_output'\n",
        "best_model_output_name = 'best_model_output'\n",
        "\n",
        "metrics_data = PipelineData(name='metrics_data',\n",
        "                           datastore=ds,\n",
        "                           pipeline_output_name=metrics_output_name,\n",
        "                           training_output=TrainingOutput(type='Metrics'))\n",
        "model_data = PipelineData(name='model_data',\n",
        "                           datastore=ds,\n",
        "                           pipeline_output_name=best_model_output_name,\n",
        "                           training_output=TrainingOutput(type='Model'))"
      ],
      "outputs": [],
      "execution_count": 12,
      "metadata": {
        "gather": {
          "logged": 1718525907019
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create an AutoMLStep."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "automl_step = AutoMLStep(\n",
        "    name='automl_module',\n",
        "    automl_config=automl_config,\n",
        "    outputs=[metrics_data, model_data],\n",
        "    allow_reuse=True)"
      ],
      "outputs": [],
      "execution_count": 13,
      "metadata": {
        "tags": [
          "automlstep-remarks-sample1"
        ],
        "gather": {
          "logged": 1718525907162
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.core import Pipeline\n",
        "pipeline = Pipeline(\n",
        "    description=\"pipeline_with_automlstep\",\n",
        "    workspace=ws,    \n",
        "    steps=[automl_step])"
      ],
      "outputs": [],
      "execution_count": 14,
      "metadata": {
        "tags": [
          "automlstep-remarks-sample2"
        ],
        "gather": {
          "logged": 1718525907271
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pipeline_run = experiment.submit(pipeline)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Created step automl_module [83bc1f6a][52363c0e-8e84-4603-aee6-5f7ef9865fdd], (This step will run and generate new outputs)\nSubmitted PipelineRun e6580f50-b605-43c6-8069-a5e47f2f2579\nLink to Azure Machine Learning Portal: https://ml.azure.com/runs/e6580f50-b605-43c6-8069-a5e47f2f2579?wsid=/subscriptions/f9d5a085-54dc-4215-9ba6-dad5d86e60a0/resourcegroups/aml-quickstarts-260718/workspaces/quick-starts-ws-260718&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\n"
        }
      ],
      "execution_count": 15,
      "metadata": {
        "gather": {
          "logged": 1718525907388
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.widgets import RunDetails\n",
        "RunDetails(pipeline_run).show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_PipelineWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO', …",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f267eb363a374009a3908949280810d0"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/runs/e6580f50-b605-43c6-8069-a5e47f2f2579?wsid=/subscriptions/f9d5a085-54dc-4215-9ba6-dad5d86e60a0/resourcegroups/aml-quickstarts-260718/workspaces/quick-starts-ws-260718&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\", \"run_id\": \"e6580f50-b605-43c6-8069-a5e47f2f2579\", \"run_properties\": {\"run_id\": \"e6580f50-b605-43c6-8069-a5e47f2f2579\", \"created_utc\": \"2024-06-16T08:17:02.141977Z\", \"properties\": {\"azureml.runsource\": \"azureml.PipelineRun\", \"runSource\": \"SDK\", \"runType\": \"SDK\", \"azureml.parameters\": \"{}\", \"azureml.continue_on_step_failure\": \"False\", \"azureml.continue_on_failed_optional_input\": \"True\", \"azureml.pipelineComponent\": \"pipelinerun\", \"azureml.pipelines.stages\": \"{\\\"Initialization\\\":null,\\\"Execution\\\":{\\\"StartTime\\\":\\\"2024-06-16T08:17:03.68964+00:00\\\",\\\"EndTime\\\":\\\"2024-06-16T08:50:09.6206734+00:00\\\",\\\"Status\\\":\\\"Finished\\\"}}\"}, \"tags\": {}, \"end_time_utc\": \"2024-06-16T08:50:09.732112Z\", \"status\": \"Completed\", \"log_files\": {\"logs/azureml/executionlogs.txt\": \"https://mlstrg260718.blob.core.windows.net/azureml/ExperimentRun/dcid.e6580f50-b605-43c6-8069-a5e47f2f2579/logs/azureml/executionlogs.txt?sv=2019-07-07&sr=b&sig=qSd8iTMbdSF5OuZF8ZLtcZDUbkcJ9bUwGDLEz5BacvM%3D&skoid=ae141e04-1351-4788-8c0c-6ebf9d9e306b&sktid=660b3398-b80e-49d2-bc5b-ac1dc93b5254&skt=2024-06-16T08%3A07%3A04Z&ske=2024-06-17T16%3A17%3A04Z&sks=b&skv=2019-07-07&st=2024-06-16T10%3A29%3A17Z&se=2024-06-16T18%3A39%3A17Z&sp=r\", \"logs/azureml/stderrlogs.txt\": \"https://mlstrg260718.blob.core.windows.net/azureml/ExperimentRun/dcid.e6580f50-b605-43c6-8069-a5e47f2f2579/logs/azureml/stderrlogs.txt?sv=2019-07-07&sr=b&sig=Qug6JI6uo7uSHX7PRwzMArHCJ5KO3BGd6r%2F1VbMC1%2Bg%3D&skoid=ae141e04-1351-4788-8c0c-6ebf9d9e306b&sktid=660b3398-b80e-49d2-bc5b-ac1dc93b5254&skt=2024-06-16T08%3A07%3A04Z&ske=2024-06-17T16%3A17%3A04Z&sks=b&skv=2019-07-07&st=2024-06-16T10%3A29%3A17Z&se=2024-06-16T18%3A39%3A17Z&sp=r\", \"logs/azureml/stdoutlogs.txt\": \"https://mlstrg260718.blob.core.windows.net/azureml/ExperimentRun/dcid.e6580f50-b605-43c6-8069-a5e47f2f2579/logs/azureml/stdoutlogs.txt?sv=2019-07-07&sr=b&sig=4BT1fMpB7U9RIfEyUgwGTXx1t%2FRfBmLmVdCYGhSJvZA%3D&skoid=ae141e04-1351-4788-8c0c-6ebf9d9e306b&sktid=660b3398-b80e-49d2-bc5b-ac1dc93b5254&skt=2024-06-16T08%3A07%3A04Z&ske=2024-06-17T16%3A17%3A04Z&sks=b&skv=2019-07-07&st=2024-06-16T10%3A29%3A17Z&se=2024-06-16T18%3A39%3A17Z&sp=r\"}, \"log_groups\": [[\"logs/azureml/executionlogs.txt\", \"logs/azureml/stderrlogs.txt\", \"logs/azureml/stdoutlogs.txt\"]], \"run_duration\": \"0:33:07\", \"run_number\": \"1718525822\", \"run_queued_details\": {\"status\": \"Finished\", \"details\": null}}, \"child_runs\": [{\"run_id\": \"524adfda-2a15-40af-bec9-998b5b1f3593\", \"name\": \"automl_module\", \"status\": \"Finished\", \"start_time\": \"2024-06-16T08:17:20.817236Z\", \"created_time\": \"2024-06-16T08:17:03.956152Z\", \"end_time\": \"2024-06-16T08:49:30.399889Z\", \"duration\": \"0:32:26\", \"run_number\": 1718525823, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2024-06-16T08:17:03.956152Z\", \"is_reused\": \"\"}], \"children_metrics\": {\"categories\": null, \"series\": null, \"metricName\": null}, \"run_metrics\": [], \"run_logs\": \"[2024-06-16 08:17:03Z] Submitting 1 runs, first five are: 83bc1f6a:524adfda-2a15-40af-bec9-998b5b1f3593\\n[2024-06-16 08:50:08Z] Completing processing run id 524adfda-2a15-40af-bec9-998b5b1f3593.\\n\\nRun is completed.\", \"graph\": {\"datasource_nodes\": {\"b82a62c0\": {\"node_id\": \"b82a62c0\", \"name\": \"BankMarketing Dataset\"}}, \"module_nodes\": {\"83bc1f6a\": {\"node_id\": \"83bc1f6a\", \"name\": \"automl_module\", \"status\": \"Finished\", \"_is_reused\": false, \"run_id\": \"524adfda-2a15-40af-bec9-998b5b1f3593\"}}, \"edges\": [{\"source_node_id\": \"b82a62c0\", \"source_node_name\": \"BankMarketing Dataset\", \"source_name\": \"data\", \"target_name\": \"training_data\", \"dst_node_id\": \"83bc1f6a\", \"dst_node_name\": \"automl_module\"}], \"child_runs\": [{\"run_id\": \"524adfda-2a15-40af-bec9-998b5b1f3593\", \"name\": \"automl_module\", \"status\": \"Finished\", \"start_time\": \"2024-06-16T08:17:20.817236Z\", \"created_time\": \"2024-06-16T08:17:03.956152Z\", \"end_time\": \"2024-06-16T08:49:30.399889Z\", \"duration\": \"0:32:26\", \"run_number\": 1718525823, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2024-06-16T08:17:03.956152Z\", \"is_reused\": \"\"}]}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.51.0\"}, \"loading\": false}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 16,
      "metadata": {
        "gather": {
          "logged": 1718525907581
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pipeline_run.wait_for_completion()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "PipelineRunId: e6580f50-b605-43c6-8069-a5e47f2f2579\nLink to Azure Machine Learning Portal: https://ml.azure.com/runs/e6580f50-b605-43c6-8069-a5e47f2f2579?wsid=/subscriptions/f9d5a085-54dc-4215-9ba6-dad5d86e60a0/resourcegroups/aml-quickstarts-260718/workspaces/quick-starts-ws-260718&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\nPipelineRun Status: Running\n\n\nStepRunId: 524adfda-2a15-40af-bec9-998b5b1f3593\nLink to Azure Machine Learning Portal: https://ml.azure.com/runs/524adfda-2a15-40af-bec9-998b5b1f3593?wsid=/subscriptions/f9d5a085-54dc-4215-9ba6-dad5d86e60a0/resourcegroups/aml-quickstarts-260718/workspaces/quick-starts-ws-260718&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\nStepRun( automl_module ) Status: Running\n\nStepRun(automl_module) Execution Summary\n=========================================\nStepRun( automl_module ) Status: Finished\n\nWarnings:\nNo scores improved over last 10 iterations, so experiment stopped early. This early stopping behavior can be disabled by setting enable_early_stopping = False in AutoMLConfig for notebook/python SDK runs.\n{'runId': '524adfda-2a15-40af-bec9-998b5b1f3593', 'target': 'auto-ml', 'status': 'Completed', 'startTimeUtc': '2024-06-16T08:17:20.817236Z', 'endTimeUtc': '2024-06-16T08:49:30.399889Z', 'services': {}, 'warnings': [{'source': 'JasmineService', 'message': 'No scores improved over last 10 iterations, so experiment stopped early. This early stopping behavior can be disabled by setting enable_early_stopping = False in AutoMLConfig for notebook/python SDK runs.'}], 'properties': {'ContentSnapshotId': '00000000-0000-0000-0000-000000000000', 'StepType': 'AutoMLStep', 'azureml.moduleid': '52363c0e-8e84-4603-aee6-5f7ef9865fdd', 'azureml.moduleFamilyId': 'ffdfe218-6c9d-4e75-a5a7-41cfd9dc2ea6', 'azureml.moduleName': 'automl_module', 'azureml.runsource': 'azureml.StepRun', 'azureml.nodeid': '83bc1f6a', 'azureml.pipelinerunid': 'e6580f50-b605-43c6-8069-a5e47f2f2579', 'azureml.pipeline': 'e6580f50-b605-43c6-8069-a5e47f2f2579', 'azureml.rootpipelinerunid': 'e6580f50-b605-43c6-8069-a5e47f2f2579', 'azureml.pipelineComponent': 'masterautomlcloud', 'num_iterations': '1000', 'training_type': 'TrainFull', 'acquisition_function': 'EI', 'metrics': 'accuracy', 'primary_metric': 'AUC_weighted', 'train_split': '0', 'MaxTimeSeconds': None, 'acquisition_parameter': '0', 'num_cross_validation': '', 'target': 'auto-ml', 'RawAMLSettingsString': None, 'AMLSettingsJsonString': '{\"path\": null, \"name\": \"placeholder\", \"subscription_id\": \"f9d5a085-54dc-4215-9ba6-dad5d86e60a0\", \"resource_group\": \"aml-quickstarts-260718\", \"workspace_name\": \"quick-starts-ws-260718\", \"region\": \"westeurope\", \"compute_target\": \"auto-ml\", \"spark_service\": null, \"azure_service\": null, \"many_models\": false, \"pipeline_fetch_max_batch_size\": 1, \"enable_batch_run\": false, \"enable_parallel_run\": false, \"num_procs\": null, \"enable_run_restructure\": false, \"start_auxiliary_runs_before_parent_complete\": false, \"enable_code_generation\": true, \"iterations\": 1000, \"primary_metric\": \"AUC_weighted\", \"task_type\": \"classification\", \"positive_label\": null, \"data_script\": null, \"test_size\": 0.0, \"test_include_predictions_only\": false, \"validation_size\": 0.0, \"n_cross_validations\": null, \"y_min\": null, \"y_max\": null, \"num_classes\": null, \"featurization\": \"auto\", \"_ignore_package_version_incompatibilities\": false, \"is_timeseries\": false, \"max_cores_per_iteration\": 1, \"max_concurrent_iterations\": 5, \"iteration_timeout_minutes\": null, \"mem_in_mb\": null, \"enforce_time_on_windows\": false, \"experiment_timeout_minutes\": 20, \"experiment_exit_score\": null, \"partition_column_names\": null, \"whitelist_models\": null, \"blacklist_algos\": null, \"supported_models\": [\"LogisticRegression\", \"GradientBoosting\", \"SVM\", \"TabnetClassifier\", \"KNN\", \"SGD\", \"XGBoostClassifier\", \"RandomForest\", \"DecisionTree\", \"LightGBM\", \"AveragedPerceptronClassifier\", \"TensorFlowLinearClassifier\", \"BernoulliNaiveBayes\", \"TensorFlowDNN\", \"MultinomialNaiveBayes\", \"ExtremeRandomTrees\", \"LinearSVM\"], \"private_models\": [], \"auto_blacklist\": true, \"blacklist_samples_reached\": false, \"exclude_nan_labels\": true, \"verbosity\": 20, \"_debug_log\": \"automl_errors.log\", \"show_warnings\": false, \"model_explainability\": true, \"service_url\": null, \"sdk_url\": null, \"sdk_packages\": null, \"enable_onnx_compatible_models\": true, \"enable_split_onnx_featurizer_estimator_models\": false, \"vm_type\": \"STANDARD_D2_V2\", \"telemetry_verbosity\": 20, \"send_telemetry\": true, \"enable_dnn\": false, \"scenario\": \"AutoML\", \"environment_label\": null, \"save_mlflow\": false, \"enable_categorical_indicators\": false, \"force_text_dnn\": false, \"enable_feature_sweeping\": false, \"enable_early_stopping\": true, \"early_stopping_n_iters\": 10, \"arguments\": null, \"dataset_id\": null, \"hyperdrive_config\": null, \"validation_dataset_id\": null, \"run_source\": null, \"metrics\": null, \"enable_metric_confidence\": false, \"enable_ensembling\": true, \"enable_stack_ensembling\": false, \"ensemble_iterations\": 15, \"enable_tf\": false, \"enable_subsampling\": null, \"subsample_seed\": null, \"enable_nimbusml\": false, \"enable_streaming\": false, \"force_streaming\": false, \"track_child_runs\": true, \"n_best_runs\": 1, \"allowed_private_models\": [], \"label_column_name\": \"y\", \"weight_column_name\": null, \"cv_split_column_names\": null, \"enable_local_managed\": false, \"_local_managed_run_id\": null, \"cost_mode\": 1, \"lag_length\": 0, \"metric_operation\": \"maximize\", \"preprocess\": true}', 'DataPrepJsonString': '{\\\\\"training_data\\\\\": {\\\\\"datasetId\\\\\": \\\\\"84b46780-2926-4cc8-be74-0a0fb81d78b6\\\\\"}, \\\\\"datasets\\\\\": 0}', 'EnableSubsampling': 'False', 'runTemplate': 'AutoML', 'Orchestrator': 'AutoML', 'ClientType': 'Others', 'PlatformVersion': 'DPV1', '_aml_system_scenario_identification': 'Remote.Parent', 'root_attribution': 'azureml.StepRun', 'snapshotId': '00000000-0000-0000-0000-000000000000', 'SetupRunId': '524adfda-2a15-40af-bec9-998b5b1f3593_setup', 'SetupRunContainerId': 'dcid.524adfda-2a15-40af-bec9-998b5b1f3593_setup', 'FeaturizationRunJsonPath': 'featurizer_container.json', 'FeaturizationRunId': '524adfda-2a15-40af-bec9-998b5b1f3593_featurize', 'ProblemInfoJsonString': '{\"dataset_num_categorical\": 0, \"is_sparse\": true, \"subsampling\": false, \"has_extra_col\": true, \"dataset_classes\": 2, \"dataset_features\": 132, \"dataset_samples\": 29655, \"single_frequency_class_detected\": false}', 'ModelExplainRunId': '524adfda-2a15-40af-bec9-998b5b1f3593_ModelExplain'}, 'inputDatasets': [{'dataset': {'id': '84b46780-2926-4cc8-be74-0a0fb81d78b6'}, 'consumptionDetails': {'type': 'RunInput', 'inputName': 'training_data', 'mechanism': 'Direct'}}], 'outputDatasets': [], 'logFiles': {'logs/azureml/executionlogs.txt': 'https://mlstrg260718.blob.core.windows.net/azureml/ExperimentRun/dcid.524adfda-2a15-40af-bec9-998b5b1f3593/logs/azureml/executionlogs.txt?sv=2019-07-07&sr=b&sig=XR%2B6rZU%2FEDTuE6jrxqWpArPJ7M9m9Eo%2FBOsbEAr3okA%3D&skoid=ae141e04-1351-4788-8c0c-6ebf9d9e306b&sktid=660b3398-b80e-49d2-bc5b-ac1dc93b5254&skt=2024-06-16T08%3A07%3A04Z&ske=2024-06-17T16%3A17%3A04Z&sks=b&skv=2019-07-07&st=2024-06-16T08%3A37%3A45Z&se=2024-06-16T16%3A47%3A45Z&sp=r', 'logs/azureml/stderrlogs.txt': 'https://mlstrg260718.blob.core.windows.net/azureml/ExperimentRun/dcid.524adfda-2a15-40af-bec9-998b5b1f3593/logs/azureml/stderrlogs.txt?sv=2019-07-07&sr=b&sig=2CcvRdl2%2Bg8q4vkh0yv8onKylq4DJEQZpoUM3dQudJQ%3D&skoid=ae141e04-1351-4788-8c0c-6ebf9d9e306b&sktid=660b3398-b80e-49d2-bc5b-ac1dc93b5254&skt=2024-06-16T08%3A07%3A04Z&ske=2024-06-17T16%3A17%3A04Z&sks=b&skv=2019-07-07&st=2024-06-16T08%3A37%3A45Z&se=2024-06-16T16%3A47%3A45Z&sp=r', 'logs/azureml/stdoutlogs.txt': 'https://mlstrg260718.blob.core.windows.net/azureml/ExperimentRun/dcid.524adfda-2a15-40af-bec9-998b5b1f3593/logs/azureml/stdoutlogs.txt?sv=2019-07-07&sr=b&sig=iUJDO60xwL%2BDsSHSnJXlPH3J05XGFnWrM8jW7drutsI%3D&skoid=ae141e04-1351-4788-8c0c-6ebf9d9e306b&sktid=660b3398-b80e-49d2-bc5b-ac1dc93b5254&skt=2024-06-16T08%3A07%3A04Z&ske=2024-06-17T16%3A17%3A04Z&sks=b&skv=2019-07-07&st=2024-06-16T08%3A37%3A45Z&se=2024-06-16T16%3A47%3A45Z&sp=r'}, 'submittedBy': 'ODL_User 260718'}\n\n\n\nPipelineRun Execution Summary\n==============================\nPipelineRun Status: Finished\n{'runId': 'e6580f50-b605-43c6-8069-a5e47f2f2579', 'status': 'Completed', 'startTimeUtc': '2024-06-16T08:17:03.331942Z', 'endTimeUtc': '2024-06-16T08:50:09.732112Z', 'services': {}, 'properties': {'azureml.runsource': 'azureml.PipelineRun', 'runSource': 'SDK', 'runType': 'SDK', 'azureml.parameters': '{}', 'azureml.continue_on_step_failure': 'False', 'azureml.continue_on_failed_optional_input': 'True', 'azureml.pipelineComponent': 'pipelinerun', 'azureml.pipelines.stages': '{\"Initialization\":null,\"Execution\":{\"StartTime\":\"2024-06-16T08:17:03.68964+00:00\",\"EndTime\":\"2024-06-16T08:50:09.6206734+00:00\",\"Status\":\"Finished\"}}'}, 'inputDatasets': [], 'outputDatasets': [], 'logFiles': {'logs/azureml/executionlogs.txt': 'https://mlstrg260718.blob.core.windows.net/azureml/ExperimentRun/dcid.e6580f50-b605-43c6-8069-a5e47f2f2579/logs/azureml/executionlogs.txt?sv=2019-07-07&sr=b&sig=Uouq90qCfoaDvTE81M%2FyHxX8EXyM4bzSc%2BAo%2BRITkjM%3D&skoid=ae141e04-1351-4788-8c0c-6ebf9d9e306b&sktid=660b3398-b80e-49d2-bc5b-ac1dc93b5254&skt=2024-06-16T08%3A07%3A04Z&ske=2024-06-17T16%3A17%3A04Z&sks=b&skv=2019-07-07&st=2024-06-16T08%3A40%3A10Z&se=2024-06-16T16%3A50%3A10Z&sp=r', 'logs/azureml/stderrlogs.txt': 'https://mlstrg260718.blob.core.windows.net/azureml/ExperimentRun/dcid.e6580f50-b605-43c6-8069-a5e47f2f2579/logs/azureml/stderrlogs.txt?sv=2019-07-07&sr=b&sig=Int1qwwYhgbAraSnJW354lLZUyWaY7ojDoX7CQhf%2BuU%3D&skoid=ae141e04-1351-4788-8c0c-6ebf9d9e306b&sktid=660b3398-b80e-49d2-bc5b-ac1dc93b5254&skt=2024-06-16T08%3A07%3A04Z&ske=2024-06-17T16%3A17%3A04Z&sks=b&skv=2019-07-07&st=2024-06-16T08%3A40%3A10Z&se=2024-06-16T16%3A50%3A10Z&sp=r', 'logs/azureml/stdoutlogs.txt': 'https://mlstrg260718.blob.core.windows.net/azureml/ExperimentRun/dcid.e6580f50-b605-43c6-8069-a5e47f2f2579/logs/azureml/stdoutlogs.txt?sv=2019-07-07&sr=b&sig=Na%2Bv7TRqGzmhmxEgtdNG%2BBsWELgsXk%2Fv8%2FKtawyTzA8%3D&skoid=ae141e04-1351-4788-8c0c-6ebf9d9e306b&sktid=660b3398-b80e-49d2-bc5b-ac1dc93b5254&skt=2024-06-16T08%3A07%3A04Z&ske=2024-06-17T16%3A17%3A04Z&sks=b&skv=2019-07-07&st=2024-06-16T08%3A40%3A10Z&se=2024-06-16T16%3A50%3A10Z&sp=r'}, 'submittedBy': 'ODL_User 260718'}\n\n"
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "'Finished'"
          },
          "metadata": {}
        }
      ],
      "execution_count": 17,
      "metadata": {
        "gather": {
          "logged": 1718527810739
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Examine Results\n",
        "\n",
        "### Retrieve the metrics of all child runs\n",
        "Outputs of above run can be used as inputs of other steps in pipeline. In this tutorial, we will examine the outputs by retrieve output data and running some tests."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "metrics_output = pipeline_run.get_pipeline_output(metrics_output_name)\n",
        "num_file_downloaded = metrics_output.download('.', show_progress=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Downloading azureml/524adfda-2a15-40af-bec9-998b5b1f3593/metrics_data\nDownloaded azureml/524adfda-2a15-40af-bec9-998b5b1f3593/metrics_data, 1 files out of an estimated total of 1\n"
        }
      ],
      "execution_count": 18,
      "metadata": {
        "gather": {
          "logged": 1718531912439
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "with open(metrics_output._path_on_datastore) as f:\n",
        "    metrics_output_result = f.read()\n",
        "    \n",
        "deserialized_metrics_output = json.loads(metrics_output_result)\n",
        "df = pd.DataFrame(deserialized_metrics_output)\n",
        "df"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 19,
          "data": {
            "text/plain": "                                 524adfda-2a15-40af-bec9-998b5b1f3593_10  \\\nprecision_score_macro                               [0.7982640315624551]   \naverage_precision_score_macro                       [0.7841343649033216]   \nrecall_score_micro                                  [0.9083459787556905]   \nf1_score_macro                                        [0.70626695822815]   \nf1_score_micro                                      [0.9083459787556905]   \nprecision_score_micro                               [0.9083459787556905]   \nmatthews_correlation                                 [0.444201567492641]   \nprecision_score_weighted                            [0.8950256468849379]   \nweighted_accuracy                                   [0.9686663170697974]   \nAUC_weighted                                        [0.9237121814143637]   \nnorm_macro_recall                                   [0.3307724225567614]   \naccuracy                                            [0.9083459787556905]   \nrecall_score_macro                                  [0.6653862112783807]   \nAUC_micro                                           [0.9741933909150988]   \nrecall_score_weighted                               [0.9083459787556905]   \nbalanced_accuracy                                   [0.6653862112783807]   \naverage_precision_score_micro                       [0.9752498455464272]   \naverage_precision_score_weighted                    [0.9437518530646575]   \nAUC_macro                                           [0.9237121814143637]   \nlog_loss                                           [0.21235370304099976]   \nf1_score_weighted                                   [0.8953324743236205]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_20  \\\nprecision_score_macro                               [0.7614634146341464]   \naverage_precision_score_macro                        [0.761645909666802]   \nrecall_score_micro                                  [0.9013657056145675]   \nf1_score_macro                                      [0.6970298385469994]   \nf1_score_micro                                      [0.9013657056145675]   \nprecision_score_micro                               [0.9013657056145675]   \nmatthews_correlation                                 [0.413927690923974]   \nprecision_score_weighted                            [0.8867629445945446]   \nweighted_accuracy                                   [0.9603408374021589]   \nAUC_weighted                                        [0.9196809466385846]   \nnorm_macro_recall                                   [0.3276483892658475]   \naccuracy                                            [0.9013657056145675]   \nrecall_score_macro                                  [0.6638241946329237]   \nAUC_micro                                           [0.9694959715023224]   \nrecall_score_weighted                               [0.9013657056145675]   \nbalanced_accuracy                                   [0.6638241946329237]   \naverage_precision_score_micro                       [0.9674153250670922]   \naverage_precision_score_weighted                     [0.938024330674381]   \nAUC_macro                                           [0.9196809466385846]   \nlog_loss                                           [0.22659377221781263]   \nf1_score_weighted                                   [0.8901143958610318]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_22  \\\nprecision_score_macro                               [0.7806355042016807]   \naverage_precision_score_macro                       [0.8092944512536897]   \nrecall_score_micro                                  [0.9110773899848255]   \nf1_score_macro                                      [0.7625467037271241]   \nf1_score_micro                                      [0.9110773899848255]   \nprecision_score_micro                               [0.9110773899848255]   \nmatthews_correlation                                [0.5270365568045118]   \nprecision_score_weighted                            [0.9062625859144872]   \nweighted_accuracy                                   [0.9517028590639043]   \nAUC_weighted                                        [0.9437433198665549]   \nnorm_macro_recall                                   [0.4948902188953537]   \naccuracy                                            [0.9110773899848255]   \nrecall_score_macro                                  [0.7474451094476768]   \nAUC_micro                                           [0.9789469951483026]   \nrecall_score_weighted                               [0.9110773899848255]   \nbalanced_accuracy                                   [0.7474451094476768]   \naverage_precision_score_micro                       [0.9799578736633584]   \naverage_precision_score_weighted                    [0.9517474249253096]   \nAUC_macro                                           [0.9437433198665548]   \nlog_loss                                           [0.18227122044096206]   \nf1_score_weighted                                   [0.9082846027144389]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_23  \\\nprecision_score_macro                               [0.6539631838947599]   \naverage_precision_score_macro                       [0.7527344844715563]   \nrecall_score_micro                                  [0.7787556904400607]   \nf1_score_macro                                      [0.6681979125126167]   \nf1_score_micro                                      [0.7787556904400607]   \nprecision_score_micro                               [0.7787556904400607]   \nmatthews_correlation                                [0.4519132559575938]   \nprecision_score_weighted                            [0.9098528705317558]   \nweighted_accuracy                                   [0.7656323205946627]   \nAUC_weighted                                        [0.9027377201318151]   \nnorm_macro_recall                                   [0.6632286555264733]   \naccuracy                                            [0.7787556904400607]   \nrecall_score_macro                                  [0.8316143277632366]   \nAUC_micro                                            [0.875713098201395]   \nrecall_score_weighted                               [0.7787556904400607]   \nbalanced_accuracy                                   [0.8316143277632366]   \naverage_precision_score_micro                       [0.8815440963192085]   \naverage_precision_score_weighted                    [0.9343501693170686]   \nAUC_macro                                           [0.9027377201318151]   \nlog_loss                                             [0.462239737597324]   \nf1_score_weighted                                    [0.816828952554927]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_7  \\\nprecision_score_macro                              [0.8065451980757572]   \naverage_precision_score_macro                      [0.8044713126721892]   \nrecall_score_micro                                 [0.9119878603945372]   \nf1_score_macro                                     [0.7267246191790099]   \nf1_score_micro                                     [0.9119878603945372]   \nprecision_score_micro                              [0.9119878603945372]   \nmatthews_correlation                              [0.47805766735773875]   \nprecision_score_weighted                           [0.9005211086889047]   \nweighted_accuracy                                  [0.9679994692811393]   \nAUC_weighted                                       [0.9290011799639528]   \nnorm_macro_recall                                 [0.37276580216246447]   \naccuracy                                           [0.9119878603945372]   \nrecall_score_macro                                 [0.6863829010812322]   \nAUC_micro                                          [0.9758368429657296]   \nrecall_score_weighted                              [0.9119878603945372]   \nbalanced_accuracy                                  [0.6863829010812322]   \naverage_precision_score_micro                      [0.9760584861374465]   \naverage_precision_score_weighted                   [0.9480633299225389]   \nAUC_macro                                          [0.9290011799639528]   \nlog_loss                                          [0.21382270170543066]   \nf1_score_weighted                                  [0.9013350533065821]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_12  \\\nprecision_score_macro                                [0.794377847854753]   \naverage_precision_score_macro                       [0.8136182410340502]   \nrecall_score_micro                                  [0.9138088012139606]   \nf1_score_macro                                      [0.7582948132750074]   \nf1_score_micro                                      [0.9138088012139606]   \nprecision_score_micro                               [0.9138088012139606]   \nmatthews_correlation                                [0.5231250045786537]   \nprecision_score_weighted                             [0.906281456407151]   \nweighted_accuracy                                   [0.9588464085130249]   \nAUC_weighted                                        [0.9405160165750666]   \nnorm_macro_recall                                    [0.464810399983699]   \naccuracy                                            [0.9138088012139606]   \nrecall_score_macro                                  [0.7324051999918495]   \nAUC_micro                                           [0.9786896502494928]   \nrecall_score_weighted                               [0.9138088012139606]   \nbalanced_accuracy                                   [0.7324051999918495]   \naverage_precision_score_micro                       [0.9796736019290664]   \naverage_precision_score_weighted                    [0.9523114199391449]   \nAUC_macro                                           [0.9405160165750666]   \nlog_loss                                           [0.21143958465162815]   \nf1_score_weighted                                   [0.9087485655110661]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_9  \\\nprecision_score_macro                              [0.6009199353924727]   \naverage_precision_score_macro                      [0.7312685370173817]   \nrecall_score_micro                                 [0.7144157814871017]   \nf1_score_macro                                     [0.5921669784675234]   \nf1_score_micro                                     [0.7144157814871017]   \nprecision_score_micro                              [0.7144157814871017]   \nmatthews_correlation                               [0.3033073307924902]   \nprecision_score_weighted                           [0.8770463659005282]   \nweighted_accuracy                                  [0.7110700297103685]   \nAUC_weighted                                       [0.8646949969157928]   \nnorm_macro_recall                                 [0.45578376836399936]   \naccuracy                                           [0.7144157814871017]   \nrecall_score_macro                                 [0.7278918841819997]   \nAUC_micro                                           [0.827599089069059]   \nrecall_score_weighted                              [0.7144157814871017]   \nbalanced_accuracy                                  [0.7278918841819997]   \naverage_precision_score_micro                      [0.8358762409163238]   \naverage_precision_score_weighted                   [0.9248458725295137]   \nAUC_macro                                          [0.8646949969157928]   \nlog_loss                                           [0.5734549596240571]   \nf1_score_weighted                                   [0.765443136627757]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_8  \\\nprecision_score_macro                              [0.7845613466137928]   \naverage_precision_score_macro                      [0.8161730247772492]   \nrecall_score_micro                                 [0.9104704097116844]   \nf1_score_macro                                     [0.7472056145957435]   \nf1_score_micro                                     [0.9104704097116844]   \nprecision_score_micro                              [0.9104704097116844]   \nmatthews_correlation                               [0.5016093372462171]   \nprecision_score_weighted                           [0.9021040535657128]   \nweighted_accuracy                                  [0.9574977663473424]   \nAUC_weighted                                        [0.941632999720291]   \nnorm_macro_recall                                 [0.44210489268255637]   \naccuracy                                           [0.9104704097116844]   \nrecall_score_macro                                 [0.7210524463412782]   \nAUC_micro                                          [0.9790036405000448]   \nrecall_score_weighted                              [0.9104704097116844]   \nbalanced_accuracy                                  [0.7210524463412782]   \naverage_precision_score_micro                      [0.9799703642815116]   \naverage_precision_score_weighted                   [0.9529980385601647]   \nAUC_macro                                           [0.941632999720291]   \nlog_loss                                          [0.19932095640960198]   \nf1_score_weighted                                  [0.9048597237768088]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_25  \\\nprecision_score_macro                               [0.7860925036001488]   \naverage_precision_score_macro                       [0.8006298573247423]   \nrecall_score_micro                                  [0.9089529590288316]   \nf1_score_macro                                       [0.729809956769593]   \nf1_score_micro                                      [0.9089529590288316]   \nprecision_score_micro                               [0.9089529590288316]   \nmatthews_correlation                               [0.47422181829067633]   \nprecision_score_weighted                            [0.8979309459394659]   \nweighted_accuracy                                   [0.9616954582031879]   \nAUC_weighted                                        [0.9310008206028745]   \nnorm_macro_recall                                   [0.3930308031720098]   \naccuracy                                            [0.9089529590288316]   \nrecall_score_macro                                  [0.6965154015860049]   \nAUC_micro                                           [0.9762675318514971]   \nrecall_score_weighted                               [0.9089529590288316]   \nbalanced_accuracy                                   [0.6965154015860049]   \naverage_precision_score_micro                       [0.9773540307790931]   \naverage_precision_score_weighted                      [0.94835501196234]   \nAUC_macro                                           [0.9310008206028745]   \nlog_loss                                           [0.19873978109892296]   \nf1_score_weighted                                    [0.900539981658476]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_27  ...  \\\nprecision_score_macro                               [0.7971214454807336]  ...   \naverage_precision_score_macro                       [0.8222801241259481]  ...   \nrecall_score_micro                                  [0.9144157814871017]  ...   \nf1_score_macro                                      [0.7586780233616315]  ...   \nf1_score_micro                                      [0.9144157814871017]  ...   \nprecision_score_micro                               [0.9144157814871017]  ...   \nmatthews_correlation                                 [0.524603786763693]  ...   \nprecision_score_weighted                            [0.9067018682678301]  ...   \nweighted_accuracy                                   [0.9598132228328224]  ...   \nAUC_weighted                                         [0.946076388310021]  ...   \nnorm_macro_recall                                   [0.4631256633824028]  ...   \naccuracy                                            [0.9144157814871017]  ...   \nrecall_score_macro                                  [0.7315628316912014]  ...   \nAUC_micro                                           [0.9801273369085914]  ...   \nrecall_score_weighted                               [0.9144157814871017]  ...   \nbalanced_accuracy                                   [0.7315628316912014]  ...   \naverage_precision_score_micro                       [0.9810541114897418]  ...   \naverage_precision_score_weighted                    [0.9548644359507902]  ...   \nAUC_macro                                           [0.9460763883100212]  ...   \nlog_loss                                            [0.1802552796174314]  ...   \nf1_score_weighted                                   [0.9091205800396924]  ...   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_6  \\\nprecision_score_macro                                [0.66781409523345]   \naverage_precision_score_macro                      [0.7849758849960253]   \nrecall_score_micro                                 [0.7942336874051593]   \nf1_score_macro                                     [0.6876122157899152]   \nf1_score_micro                                     [0.7942336874051593]   \nprecision_score_micro                              [0.7942336874051593]   \nmatthews_correlation                                [0.489465214911654]   \nprecision_score_weighted                           [0.9178178826913468]   \nweighted_accuracy                                  [0.7786735638656799]   \nAUC_weighted                                       [0.9251713911534194]   \nnorm_macro_recall                                  [0.7138142844176221]   \naccuracy                                           [0.7942336874051593]   \nrecall_score_macro                                  [0.856907142208811]   \nAUC_micro                                          [0.9047048339669479]   \nrecall_score_weighted                              [0.7942336874051593]   \nbalanced_accuracy                                   [0.856907142208811]   \naverage_precision_score_micro                       [0.911872069839399]   \naverage_precision_score_weighted                    [0.944263524344341]   \nAUC_macro                                          [0.9251713911534194]   \nlog_loss                                          [0.38837474273282796]   \nf1_score_weighted                                  [0.8292387627614369]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_11  \\\nprecision_score_macro                               [0.6188258471237195]   \naverage_precision_score_macro                       [0.7142339886548356]   \nrecall_score_micro                                  [0.7626707132018209]   \nf1_score_macro                                       [0.628326138407977]   \nf1_score_micro                                      [0.7626707132018209]   \nprecision_score_micro                               [0.7626707132018209]   \nmatthews_correlation                                [0.3408320338958528]   \nprecision_score_weighted                            [0.8806132653171042]   \nweighted_accuracy                                    [0.767205621480869]   \nAUC_weighted                                        [0.8258691814532636]   \nnorm_macro_recall                                  [0.48880979240414413]   \naccuracy                                            [0.7626707132018209]   \nrecall_score_macro                                  [0.7444048962020721]   \nAUC_micro                                           [0.8307668997722673]   \nrecall_score_weighted                               [0.7626707132018209]   \nbalanced_accuracy                                   [0.7444048962020721]   \naverage_precision_score_micro                        [0.799859735912692]   \naverage_precision_score_weighted                    [0.9124406678055358]   \nAUC_macro                                           [0.8258691814532636]   \nlog_loss                                            [0.5534927083350079]   \nf1_score_weighted                                   [0.8017330428743368]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_15  \\\nprecision_score_macro                               [0.8515415609080743]   \naverage_precision_score_macro                       [0.8180629123186702]   \nrecall_score_micro                                  [0.9068285280728376]   \nf1_score_macro                                        [0.65173989757714]   \nf1_score_micro                                      [0.9068285280728376]   \nprecision_score_micro                               [0.9068285280728376]   \nmatthews_correlation                               [0.39340196123415067]   \nprecision_score_weighted                            [0.8973958505740813]   \nweighted_accuracy                                   [0.9805076942162568]   \nAUC_weighted                                        [0.9439716252938334]   \nnorm_macro_recall                                  [0.22012347943028288]   \naccuracy                                            [0.9068285280728376]   \nrecall_score_macro                                  [0.6100617397151414]   \nAUC_micro                                           [0.9775185191155036]   \nrecall_score_weighted                               [0.9068285280728376]   \nbalanced_accuracy                                   [0.6100617397151414]   \naverage_precision_score_micro                       [0.9786283276460308]   \naverage_precision_score_weighted                    [0.9536793029588512]   \nAUC_macro                                           [0.9439716252938333]   \nlog_loss                                           [0.21258977849913452]   \nf1_score_weighted                                    [0.883038347285473]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_13  \\\nprecision_score_macro                               [0.9442757364105678]   \naverage_precision_score_macro                       [0.7225674036330753]   \nrecall_score_micro                                   [0.888619119878604]   \nf1_score_macro                                      [0.4758844840760577]   \nf1_score_micro                                       [0.888619119878604]   \nprecision_score_micro                                [0.888619119878604]   \nmatthews_correlation                               [0.06939738570480868]   \nprecision_score_weighted                            [0.9010323549240192]   \nweighted_accuracy                                   [0.9844299089511326]   \nAUC_weighted                                        [0.8538099683799298]   \nnorm_macro_recall                                 [0.005420054200542035]   \naccuracy                                             [0.888619119878604]   \nrecall_score_macro                                   [0.502710027100271]   \nAUC_micro                                           [0.9583828903405859]   \nrecall_score_weighted                                [0.888619119878604]   \nbalanced_accuracy                                    [0.502710027100271]   \naverage_precision_score_micro                       [0.9579173008425309]   \naverage_precision_score_weighted                    [0.9198180889380442]   \nAUC_macro                                           [0.8538099683799298]   \nlog_loss                                           [0.28304931294290536]   \nf1_score_weighted                                   [0.8368155592289684]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_17  \\\nprecision_score_macro                               [0.6640958864801403]   \naverage_precision_score_macro                       [0.7657457161417829]   \nrecall_score_micro                                  [0.8009104704097116]   \nf1_score_macro                                       [0.686777268601331]   \nf1_score_micro                                      [0.8009104704097116]   \nprecision_score_micro                               [0.8009104704097116]   \nmatthews_correlation                                [0.4694821036573319]   \nprecision_score_weighted                             [0.910285113157068]   \nweighted_accuracy                                   [0.7922484003413801]   \nAUC_weighted                                        [0.9111674233625453]   \nnorm_macro_recall                                    [0.671599545797235]   \naccuracy                                            [0.8009104704097116]   \nrecall_score_macro                                  [0.8357997728986175]   \nAUC_micro                                           [0.8916454553618508]   \nrecall_score_weighted                               [0.8009104704097116]   \nbalanced_accuracy                                   [0.8357997728986175]   \naverage_precision_score_micro                       [0.8873004538640816]   \naverage_precision_score_weighted                    [0.9384576012095839]   \nAUC_macro                                           [0.9111674233625454]   \nlog_loss                                            [0.4223483341982614]   \nf1_score_weighted                                   [0.8335035617255289]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_21  \\\nprecision_score_macro                               [0.7826782947960296]   \naverage_precision_score_macro                       [0.8105653493151015]   \nrecall_score_micro                                  [0.9104704097116844]   \nf1_score_macro                                      [0.7513066936435677]   \nf1_score_micro                                      [0.9104704097116844]   \nprecision_score_micro                               [0.9104704097116844]   \nmatthews_correlation                                [0.5079177049128708]   \nprecision_score_weighted                            [0.9030335205195396]   \nweighted_accuracy                                   [0.9557338389725855]   \nAUC_weighted                                        [0.9385474032457345]   \nnorm_macro_recall                                  [0.45631447428623284]   \naccuracy                                            [0.9104704097116844]   \nrecall_score_macro                                  [0.7281572371431164]   \nAUC_micro                                            [0.978205355518662]   \nrecall_score_weighted                               [0.9104704097116844]   \nbalanced_accuracy                                   [0.7281572371431164]   \naverage_precision_score_micro                       [0.9789832359081058]   \naverage_precision_score_weighted                    [0.9512078722916547]   \nAUC_macro                                           [0.9385474032457344]   \nlog_loss                                           [0.22587372849244478]   \nf1_score_weighted                                   [0.9057003286914337]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_16  \\\nprecision_score_macro                               [0.6937974944145098]   \naverage_precision_score_macro                       [0.7552883169240957]   \nrecall_score_micro                                  [0.8437025796661608]   \nf1_score_macro                                      [0.7296781721804722]   \nf1_score_micro                                      [0.8437025796661607]   \nprecision_score_micro                               [0.8437025796661608]   \nmatthews_correlation                                [0.5238288494614208]   \nprecision_score_weighted                            [0.9162625570891886]   \nweighted_accuracy                                   [0.8411526027126678]   \nAUC_weighted                                        [0.9229967009171117]   \nnorm_macro_recall                                   [0.7079468812459826]   \naccuracy                                            [0.8437025796661608]   \nrecall_score_macro                                  [0.8539734406229913]   \nAUC_micro                                           [0.9107811762430316]   \nrecall_score_weighted                               [0.8437025796661608]   \nbalanced_accuracy                                   [0.8539734406229913]   \naverage_precision_score_micro                       [0.8847983017425624]   \naverage_precision_score_weighted                    [0.9364341205088044]   \nAUC_macro                                           [0.9229967009171116]   \nlog_loss                                             [0.402903666898443]   \nf1_score_weighted                                   [0.8659213543958488]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_18  \\\nprecision_score_macro                               [0.7881835838009958]   \naverage_precision_score_macro                       [0.8112595115150514]   \nrecall_score_micro                                  [0.9132018209408195]   \nf1_score_macro                                      [0.7648974537064757]   \nf1_score_micro                                      [0.9132018209408195]   \nprecision_score_micro                               [0.9132018209408195]   \nmatthews_correlation                                [0.5328108142609521]   \nprecision_score_weighted                             [0.907597716175493]   \nweighted_accuracy                                   [0.9546457273395061]   \nAUC_weighted                                        [0.9415278773430249]   \nnorm_macro_recall                                  [0.49254603619173576]   \naccuracy                                            [0.9132018209408195]   \nrecall_score_macro                                  [0.7462730180958679]   \nAUC_micro                                            [0.978789217119791]   \nrecall_score_weighted                               [0.9132018209408195]   \nbalanced_accuracy                                   [0.7462730180958679]   \naverage_precision_score_micro                       [0.9797798706773968]   \naverage_precision_score_weighted                    [0.9519080952569361]   \nAUC_macro                                           [0.9415278773430249]   \nlog_loss                                           [0.19693610768213313]   \nf1_score_weighted                                   [0.9098016443897835]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_19  \\\nprecision_score_macro                               [0.4440060698027314]   \naverage_precision_score_macro                       [0.7101815842107033]   \nrecall_score_micro                                  [0.8880121396054628]   \nf1_score_macro                                      [0.4703423886834914]   \nf1_score_micro                                      [0.8880121396054628]   \nprecision_score_micro                               [0.8880121396054628]   \nmatthews_correlation                                               [0.0]   \nprecision_score_weighted                             [0.788565560086672]   \nweighted_accuracy                                   [0.9843450583187134]   \nAUC_weighted                                        [0.8244715632392141]   \nnorm_macro_recall                                                  [0.0]   \naccuracy                                            [0.8880121396054628]   \nrecall_score_macro                                                 [0.5]   \nAUC_micro                                           [0.9525473138359726]   \nrecall_score_weighted                               [0.8880121396054628]   \nbalanced_accuracy                                                  [0.5]   \naverage_precision_score_micro                       [0.9498160250538213]   \naverage_precision_score_weighted                    [0.9111198021240949]   \nAUC_macro                                           [0.8244715632392141]   \nlog_loss                                            [0.2877452267591956]   \nf1_score_weighted                                   [0.8353395018439429]   \n\n                                 524adfda-2a15-40af-bec9-998b5b1f3593_14  \nprecision_score_macro                               [0.7963498848172641]  \naverage_precision_score_macro                       [0.8111345797001875]  \nrecall_score_micro                                  [0.9116843702579667]  \nf1_score_macro                                      [0.7375306206748168]  \nf1_score_micro                                      [0.9116843702579667]  \nprecision_score_micro                               [0.9116843702579667]  \nmatthews_correlation                               [0.49029278190591824]  \nprecision_score_weighted                            [0.9012628265717558]  \nweighted_accuracy                                    [0.963547225528037]  \nAUC_weighted                                        [0.9307002724846113]  \nnorm_macro_recall                                  [0.40557972907138495]  \naccuracy                                            [0.9116843702579667]  \nrecall_score_macro                                  [0.7027898645356925]  \nAUC_micro                                           [0.9768372551412565]  \nrecall_score_weighted                               [0.9116843702579667]  \nbalanced_accuracy                                   [0.7027898645356925]  \naverage_precision_score_micro                       [0.9763566444997427]  \naverage_precision_score_weighted                     [0.949443823235694]  \nAUC_macro                                           [0.9307002724846114]  \nlog_loss                                            [0.2188041181662073]  \nf1_score_weighted                                   [0.9034438612426685]  \n\n[21 rows x 43 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_10</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_20</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_22</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_23</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_7</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_12</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_9</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_8</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_25</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_27</th>\n      <th>...</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_6</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_11</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_15</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_13</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_17</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_21</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_16</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_18</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_19</th>\n      <th>524adfda-2a15-40af-bec9-998b5b1f3593_14</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>precision_score_macro</th>\n      <td>[0.7982640315624551]</td>\n      <td>[0.7614634146341464]</td>\n      <td>[0.7806355042016807]</td>\n      <td>[0.6539631838947599]</td>\n      <td>[0.8065451980757572]</td>\n      <td>[0.794377847854753]</td>\n      <td>[0.6009199353924727]</td>\n      <td>[0.7845613466137928]</td>\n      <td>[0.7860925036001488]</td>\n      <td>[0.7971214454807336]</td>\n      <td>...</td>\n      <td>[0.66781409523345]</td>\n      <td>[0.6188258471237195]</td>\n      <td>[0.8515415609080743]</td>\n      <td>[0.9442757364105678]</td>\n      <td>[0.6640958864801403]</td>\n      <td>[0.7826782947960296]</td>\n      <td>[0.6937974944145098]</td>\n      <td>[0.7881835838009958]</td>\n      <td>[0.4440060698027314]</td>\n      <td>[0.7963498848172641]</td>\n    </tr>\n    <tr>\n      <th>average_precision_score_macro</th>\n      <td>[0.7841343649033216]</td>\n      <td>[0.761645909666802]</td>\n      <td>[0.8092944512536897]</td>\n      <td>[0.7527344844715563]</td>\n      <td>[0.8044713126721892]</td>\n      <td>[0.8136182410340502]</td>\n      <td>[0.7312685370173817]</td>\n      <td>[0.8161730247772492]</td>\n      <td>[0.8006298573247423]</td>\n      <td>[0.8222801241259481]</td>\n      <td>...</td>\n      <td>[0.7849758849960253]</td>\n      <td>[0.7142339886548356]</td>\n      <td>[0.8180629123186702]</td>\n      <td>[0.7225674036330753]</td>\n      <td>[0.7657457161417829]</td>\n      <td>[0.8105653493151015]</td>\n      <td>[0.7552883169240957]</td>\n      <td>[0.8112595115150514]</td>\n      <td>[0.7101815842107033]</td>\n      <td>[0.8111345797001875]</td>\n    </tr>\n    <tr>\n      <th>recall_score_micro</th>\n      <td>[0.9083459787556905]</td>\n      <td>[0.9013657056145675]</td>\n      <td>[0.9110773899848255]</td>\n      <td>[0.7787556904400607]</td>\n      <td>[0.9119878603945372]</td>\n      <td>[0.9138088012139606]</td>\n      <td>[0.7144157814871017]</td>\n      <td>[0.9104704097116844]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9144157814871017]</td>\n      <td>...</td>\n      <td>[0.7942336874051593]</td>\n      <td>[0.7626707132018209]</td>\n      <td>[0.9068285280728376]</td>\n      <td>[0.888619119878604]</td>\n      <td>[0.8009104704097116]</td>\n      <td>[0.9104704097116844]</td>\n      <td>[0.8437025796661608]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9116843702579667]</td>\n    </tr>\n    <tr>\n      <th>f1_score_macro</th>\n      <td>[0.70626695822815]</td>\n      <td>[0.6970298385469994]</td>\n      <td>[0.7625467037271241]</td>\n      <td>[0.6681979125126167]</td>\n      <td>[0.7267246191790099]</td>\n      <td>[0.7582948132750074]</td>\n      <td>[0.5921669784675234]</td>\n      <td>[0.7472056145957435]</td>\n      <td>[0.729809956769593]</td>\n      <td>[0.7586780233616315]</td>\n      <td>...</td>\n      <td>[0.6876122157899152]</td>\n      <td>[0.628326138407977]</td>\n      <td>[0.65173989757714]</td>\n      <td>[0.4758844840760577]</td>\n      <td>[0.686777268601331]</td>\n      <td>[0.7513066936435677]</td>\n      <td>[0.7296781721804722]</td>\n      <td>[0.7648974537064757]</td>\n      <td>[0.4703423886834914]</td>\n      <td>[0.7375306206748168]</td>\n    </tr>\n    <tr>\n      <th>f1_score_micro</th>\n      <td>[0.9083459787556905]</td>\n      <td>[0.9013657056145675]</td>\n      <td>[0.9110773899848255]</td>\n      <td>[0.7787556904400607]</td>\n      <td>[0.9119878603945372]</td>\n      <td>[0.9138088012139606]</td>\n      <td>[0.7144157814871017]</td>\n      <td>[0.9104704097116844]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9144157814871017]</td>\n      <td>...</td>\n      <td>[0.7942336874051593]</td>\n      <td>[0.7626707132018209]</td>\n      <td>[0.9068285280728376]</td>\n      <td>[0.888619119878604]</td>\n      <td>[0.8009104704097116]</td>\n      <td>[0.9104704097116844]</td>\n      <td>[0.8437025796661607]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9116843702579667]</td>\n    </tr>\n    <tr>\n      <th>precision_score_micro</th>\n      <td>[0.9083459787556905]</td>\n      <td>[0.9013657056145675]</td>\n      <td>[0.9110773899848255]</td>\n      <td>[0.7787556904400607]</td>\n      <td>[0.9119878603945372]</td>\n      <td>[0.9138088012139606]</td>\n      <td>[0.7144157814871017]</td>\n      <td>[0.9104704097116844]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9144157814871017]</td>\n      <td>...</td>\n      <td>[0.7942336874051593]</td>\n      <td>[0.7626707132018209]</td>\n      <td>[0.9068285280728376]</td>\n      <td>[0.888619119878604]</td>\n      <td>[0.8009104704097116]</td>\n      <td>[0.9104704097116844]</td>\n      <td>[0.8437025796661608]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9116843702579667]</td>\n    </tr>\n    <tr>\n      <th>matthews_correlation</th>\n      <td>[0.444201567492641]</td>\n      <td>[0.413927690923974]</td>\n      <td>[0.5270365568045118]</td>\n      <td>[0.4519132559575938]</td>\n      <td>[0.47805766735773875]</td>\n      <td>[0.5231250045786537]</td>\n      <td>[0.3033073307924902]</td>\n      <td>[0.5016093372462171]</td>\n      <td>[0.47422181829067633]</td>\n      <td>[0.524603786763693]</td>\n      <td>...</td>\n      <td>[0.489465214911654]</td>\n      <td>[0.3408320338958528]</td>\n      <td>[0.39340196123415067]</td>\n      <td>[0.06939738570480868]</td>\n      <td>[0.4694821036573319]</td>\n      <td>[0.5079177049128708]</td>\n      <td>[0.5238288494614208]</td>\n      <td>[0.5328108142609521]</td>\n      <td>[0.0]</td>\n      <td>[0.49029278190591824]</td>\n    </tr>\n    <tr>\n      <th>precision_score_weighted</th>\n      <td>[0.8950256468849379]</td>\n      <td>[0.8867629445945446]</td>\n      <td>[0.9062625859144872]</td>\n      <td>[0.9098528705317558]</td>\n      <td>[0.9005211086889047]</td>\n      <td>[0.906281456407151]</td>\n      <td>[0.8770463659005282]</td>\n      <td>[0.9021040535657128]</td>\n      <td>[0.8979309459394659]</td>\n      <td>[0.9067018682678301]</td>\n      <td>...</td>\n      <td>[0.9178178826913468]</td>\n      <td>[0.8806132653171042]</td>\n      <td>[0.8973958505740813]</td>\n      <td>[0.9010323549240192]</td>\n      <td>[0.910285113157068]</td>\n      <td>[0.9030335205195396]</td>\n      <td>[0.9162625570891886]</td>\n      <td>[0.907597716175493]</td>\n      <td>[0.788565560086672]</td>\n      <td>[0.9012628265717558]</td>\n    </tr>\n    <tr>\n      <th>weighted_accuracy</th>\n      <td>[0.9686663170697974]</td>\n      <td>[0.9603408374021589]</td>\n      <td>[0.9517028590639043]</td>\n      <td>[0.7656323205946627]</td>\n      <td>[0.9679994692811393]</td>\n      <td>[0.9588464085130249]</td>\n      <td>[0.7110700297103685]</td>\n      <td>[0.9574977663473424]</td>\n      <td>[0.9616954582031879]</td>\n      <td>[0.9598132228328224]</td>\n      <td>...</td>\n      <td>[0.7786735638656799]</td>\n      <td>[0.767205621480869]</td>\n      <td>[0.9805076942162568]</td>\n      <td>[0.9844299089511326]</td>\n      <td>[0.7922484003413801]</td>\n      <td>[0.9557338389725855]</td>\n      <td>[0.8411526027126678]</td>\n      <td>[0.9546457273395061]</td>\n      <td>[0.9843450583187134]</td>\n      <td>[0.963547225528037]</td>\n    </tr>\n    <tr>\n      <th>AUC_weighted</th>\n      <td>[0.9237121814143637]</td>\n      <td>[0.9196809466385846]</td>\n      <td>[0.9437433198665549]</td>\n      <td>[0.9027377201318151]</td>\n      <td>[0.9290011799639528]</td>\n      <td>[0.9405160165750666]</td>\n      <td>[0.8646949969157928]</td>\n      <td>[0.941632999720291]</td>\n      <td>[0.9310008206028745]</td>\n      <td>[0.946076388310021]</td>\n      <td>...</td>\n      <td>[0.9251713911534194]</td>\n      <td>[0.8258691814532636]</td>\n      <td>[0.9439716252938334]</td>\n      <td>[0.8538099683799298]</td>\n      <td>[0.9111674233625453]</td>\n      <td>[0.9385474032457345]</td>\n      <td>[0.9229967009171117]</td>\n      <td>[0.9415278773430249]</td>\n      <td>[0.8244715632392141]</td>\n      <td>[0.9307002724846113]</td>\n    </tr>\n    <tr>\n      <th>norm_macro_recall</th>\n      <td>[0.3307724225567614]</td>\n      <td>[0.3276483892658475]</td>\n      <td>[0.4948902188953537]</td>\n      <td>[0.6632286555264733]</td>\n      <td>[0.37276580216246447]</td>\n      <td>[0.464810399983699]</td>\n      <td>[0.45578376836399936]</td>\n      <td>[0.44210489268255637]</td>\n      <td>[0.3930308031720098]</td>\n      <td>[0.4631256633824028]</td>\n      <td>...</td>\n      <td>[0.7138142844176221]</td>\n      <td>[0.48880979240414413]</td>\n      <td>[0.22012347943028288]</td>\n      <td>[0.005420054200542035]</td>\n      <td>[0.671599545797235]</td>\n      <td>[0.45631447428623284]</td>\n      <td>[0.7079468812459826]</td>\n      <td>[0.49254603619173576]</td>\n      <td>[0.0]</td>\n      <td>[0.40557972907138495]</td>\n    </tr>\n    <tr>\n      <th>accuracy</th>\n      <td>[0.9083459787556905]</td>\n      <td>[0.9013657056145675]</td>\n      <td>[0.9110773899848255]</td>\n      <td>[0.7787556904400607]</td>\n      <td>[0.9119878603945372]</td>\n      <td>[0.9138088012139606]</td>\n      <td>[0.7144157814871017]</td>\n      <td>[0.9104704097116844]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9144157814871017]</td>\n      <td>...</td>\n      <td>[0.7942336874051593]</td>\n      <td>[0.7626707132018209]</td>\n      <td>[0.9068285280728376]</td>\n      <td>[0.888619119878604]</td>\n      <td>[0.8009104704097116]</td>\n      <td>[0.9104704097116844]</td>\n      <td>[0.8437025796661608]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9116843702579667]</td>\n    </tr>\n    <tr>\n      <th>recall_score_macro</th>\n      <td>[0.6653862112783807]</td>\n      <td>[0.6638241946329237]</td>\n      <td>[0.7474451094476768]</td>\n      <td>[0.8316143277632366]</td>\n      <td>[0.6863829010812322]</td>\n      <td>[0.7324051999918495]</td>\n      <td>[0.7278918841819997]</td>\n      <td>[0.7210524463412782]</td>\n      <td>[0.6965154015860049]</td>\n      <td>[0.7315628316912014]</td>\n      <td>...</td>\n      <td>[0.856907142208811]</td>\n      <td>[0.7444048962020721]</td>\n      <td>[0.6100617397151414]</td>\n      <td>[0.502710027100271]</td>\n      <td>[0.8357997728986175]</td>\n      <td>[0.7281572371431164]</td>\n      <td>[0.8539734406229913]</td>\n      <td>[0.7462730180958679]</td>\n      <td>[0.5]</td>\n      <td>[0.7027898645356925]</td>\n    </tr>\n    <tr>\n      <th>AUC_micro</th>\n      <td>[0.9741933909150988]</td>\n      <td>[0.9694959715023224]</td>\n      <td>[0.9789469951483026]</td>\n      <td>[0.875713098201395]</td>\n      <td>[0.9758368429657296]</td>\n      <td>[0.9786896502494928]</td>\n      <td>[0.827599089069059]</td>\n      <td>[0.9790036405000448]</td>\n      <td>[0.9762675318514971]</td>\n      <td>[0.9801273369085914]</td>\n      <td>...</td>\n      <td>[0.9047048339669479]</td>\n      <td>[0.8307668997722673]</td>\n      <td>[0.9775185191155036]</td>\n      <td>[0.9583828903405859]</td>\n      <td>[0.8916454553618508]</td>\n      <td>[0.978205355518662]</td>\n      <td>[0.9107811762430316]</td>\n      <td>[0.978789217119791]</td>\n      <td>[0.9525473138359726]</td>\n      <td>[0.9768372551412565]</td>\n    </tr>\n    <tr>\n      <th>recall_score_weighted</th>\n      <td>[0.9083459787556905]</td>\n      <td>[0.9013657056145675]</td>\n      <td>[0.9110773899848255]</td>\n      <td>[0.7787556904400607]</td>\n      <td>[0.9119878603945372]</td>\n      <td>[0.9138088012139606]</td>\n      <td>[0.7144157814871017]</td>\n      <td>[0.9104704097116844]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9144157814871017]</td>\n      <td>...</td>\n      <td>[0.7942336874051593]</td>\n      <td>[0.7626707132018209]</td>\n      <td>[0.9068285280728376]</td>\n      <td>[0.888619119878604]</td>\n      <td>[0.8009104704097116]</td>\n      <td>[0.9104704097116844]</td>\n      <td>[0.8437025796661608]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9116843702579667]</td>\n    </tr>\n    <tr>\n      <th>balanced_accuracy</th>\n      <td>[0.6653862112783807]</td>\n      <td>[0.6638241946329237]</td>\n      <td>[0.7474451094476768]</td>\n      <td>[0.8316143277632366]</td>\n      <td>[0.6863829010812322]</td>\n      <td>[0.7324051999918495]</td>\n      <td>[0.7278918841819997]</td>\n      <td>[0.7210524463412782]</td>\n      <td>[0.6965154015860049]</td>\n      <td>[0.7315628316912014]</td>\n      <td>...</td>\n      <td>[0.856907142208811]</td>\n      <td>[0.7444048962020721]</td>\n      <td>[0.6100617397151414]</td>\n      <td>[0.502710027100271]</td>\n      <td>[0.8357997728986175]</td>\n      <td>[0.7281572371431164]</td>\n      <td>[0.8539734406229913]</td>\n      <td>[0.7462730180958679]</td>\n      <td>[0.5]</td>\n      <td>[0.7027898645356925]</td>\n    </tr>\n    <tr>\n      <th>average_precision_score_micro</th>\n      <td>[0.9752498455464272]</td>\n      <td>[0.9674153250670922]</td>\n      <td>[0.9799578736633584]</td>\n      <td>[0.8815440963192085]</td>\n      <td>[0.9760584861374465]</td>\n      <td>[0.9796736019290664]</td>\n      <td>[0.8358762409163238]</td>\n      <td>[0.9799703642815116]</td>\n      <td>[0.9773540307790931]</td>\n      <td>[0.9810541114897418]</td>\n      <td>...</td>\n      <td>[0.911872069839399]</td>\n      <td>[0.799859735912692]</td>\n      <td>[0.9786283276460308]</td>\n      <td>[0.9579173008425309]</td>\n      <td>[0.8873004538640816]</td>\n      <td>[0.9789832359081058]</td>\n      <td>[0.8847983017425624]</td>\n      <td>[0.9797798706773968]</td>\n      <td>[0.9498160250538213]</td>\n      <td>[0.9763566444997427]</td>\n    </tr>\n    <tr>\n      <th>average_precision_score_weighted</th>\n      <td>[0.9437518530646575]</td>\n      <td>[0.938024330674381]</td>\n      <td>[0.9517474249253096]</td>\n      <td>[0.9343501693170686]</td>\n      <td>[0.9480633299225389]</td>\n      <td>[0.9523114199391449]</td>\n      <td>[0.9248458725295137]</td>\n      <td>[0.9529980385601647]</td>\n      <td>[0.94835501196234]</td>\n      <td>[0.9548644359507902]</td>\n      <td>...</td>\n      <td>[0.944263524344341]</td>\n      <td>[0.9124406678055358]</td>\n      <td>[0.9536793029588512]</td>\n      <td>[0.9198180889380442]</td>\n      <td>[0.9384576012095839]</td>\n      <td>[0.9512078722916547]</td>\n      <td>[0.9364341205088044]</td>\n      <td>[0.9519080952569361]</td>\n      <td>[0.9111198021240949]</td>\n      <td>[0.949443823235694]</td>\n    </tr>\n    <tr>\n      <th>AUC_macro</th>\n      <td>[0.9237121814143637]</td>\n      <td>[0.9196809466385846]</td>\n      <td>[0.9437433198665548]</td>\n      <td>[0.9027377201318151]</td>\n      <td>[0.9290011799639528]</td>\n      <td>[0.9405160165750666]</td>\n      <td>[0.8646949969157928]</td>\n      <td>[0.941632999720291]</td>\n      <td>[0.9310008206028745]</td>\n      <td>[0.9460763883100212]</td>\n      <td>...</td>\n      <td>[0.9251713911534194]</td>\n      <td>[0.8258691814532636]</td>\n      <td>[0.9439716252938333]</td>\n      <td>[0.8538099683799298]</td>\n      <td>[0.9111674233625454]</td>\n      <td>[0.9385474032457344]</td>\n      <td>[0.9229967009171116]</td>\n      <td>[0.9415278773430249]</td>\n      <td>[0.8244715632392141]</td>\n      <td>[0.9307002724846114]</td>\n    </tr>\n    <tr>\n      <th>log_loss</th>\n      <td>[0.21235370304099976]</td>\n      <td>[0.22659377221781263]</td>\n      <td>[0.18227122044096206]</td>\n      <td>[0.462239737597324]</td>\n      <td>[0.21382270170543066]</td>\n      <td>[0.21143958465162815]</td>\n      <td>[0.5734549596240571]</td>\n      <td>[0.19932095640960198]</td>\n      <td>[0.19873978109892296]</td>\n      <td>[0.1802552796174314]</td>\n      <td>...</td>\n      <td>[0.38837474273282796]</td>\n      <td>[0.5534927083350079]</td>\n      <td>[0.21258977849913452]</td>\n      <td>[0.28304931294290536]</td>\n      <td>[0.4223483341982614]</td>\n      <td>[0.22587372849244478]</td>\n      <td>[0.402903666898443]</td>\n      <td>[0.19693610768213313]</td>\n      <td>[0.2877452267591956]</td>\n      <td>[0.2188041181662073]</td>\n    </tr>\n    <tr>\n      <th>f1_score_weighted</th>\n      <td>[0.8953324743236205]</td>\n      <td>[0.8901143958610318]</td>\n      <td>[0.9082846027144389]</td>\n      <td>[0.816828952554927]</td>\n      <td>[0.9013350533065821]</td>\n      <td>[0.9087485655110661]</td>\n      <td>[0.765443136627757]</td>\n      <td>[0.9048597237768088]</td>\n      <td>[0.900539981658476]</td>\n      <td>[0.9091205800396924]</td>\n      <td>...</td>\n      <td>[0.8292387627614369]</td>\n      <td>[0.8017330428743368]</td>\n      <td>[0.883038347285473]</td>\n      <td>[0.8368155592289684]</td>\n      <td>[0.8335035617255289]</td>\n      <td>[0.9057003286914337]</td>\n      <td>[0.8659213543958488]</td>\n      <td>[0.9098016443897835]</td>\n      <td>[0.8353395018439429]</td>\n      <td>[0.9034438612426685]</td>\n    </tr>\n  </tbody>\n</table>\n<p>21 rows × 43 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 19,
      "metadata": {
        "gather": {
          "logged": 1718531916990
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Retrieve the Best Model"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Retrieve best model from Pipeline Run\n",
        "best_model_output = pipeline_run.get_pipeline_output(best_model_output_name)\n",
        "num_file_downloaded = best_model_output.download('.', show_progress=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Downloading azureml/524adfda-2a15-40af-bec9-998b5b1f3593/model_data\nDownloaded azureml/524adfda-2a15-40af-bec9-998b5b1f3593/model_data, 1 files out of an estimated total of 1\n"
        }
      ],
      "execution_count": 20,
      "metadata": {
        "gather": {
          "logged": 1718531921539
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "\n",
        "with open(best_model_output._path_on_datastore, \"rb\" ) as f:\n",
        "    best_model = pickle.load(f)\n",
        "best_model"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 21,
          "data": {
            "text/plain": "PipelineWithYTransformations(Pipeline={'memory': None,\n                                       'steps': [('datatransformer',\n                                                  DataTransformer(enable_dnn=False, enable_feature_sweeping=False, feature_sweeping_config={}, feature_sweeping_timeout=86400, featurization_config=None, force_text_dnn=False, is_cross_validation=False, is_onnx_compatible=True, observer=None, task='classification', working_dir='/m...\n                                                  PreFittedSoftVotingClassifier(classification_labels=array([0, 1]), estimators=[('27', Pipeline(memory=None, steps=[('maxabsscaler', MaxAbsScaler(copy=True)), ('lightgbmclassifier', LightGBMClassifier(boosting_type='goss', colsample_bytree=0.8911111111111111, learning_rate=0.03158578947368421, max_bin=280, max_depth=9, min_child_weight=9, min_data_in_leaf=1e-05, min_split_gain=0.2631578947368421, n_estimators=100, n_jobs=1, num_leaves=89, problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=None, reg_alpha=0.10526315789473684, reg_lambda=0.21052631578947367, subsample=1))], verbose=False)), ('31', Pipeline(memory=None, steps=[('standardscalerwrapper', StandardScalerWrapper(copy=True, with_mean=False, with_std=False)), ('xgboostclassifier', XGBoostClassifier(booster='gbtree', colsample_bytree=0.7, eta=0.4, gamma=5, max_depth=6, max_leaves=0, n_estimators=100, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=1.7708333333333335, reg_lambda=1.5625, subsample=0.5, tree_method='auto'))], verbose=False)), ('0', Pipeline(memory=None, steps=[('maxabsscaler', MaxAbsScaler(copy=True)), ('lightgbmclassifier', LightGBMClassifier(min_data_in_leaf=20, n_jobs=1, problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=None))], verbose=False)), ('39', Pipeline(memory=None, steps=[('sparsenormalizer', Normalizer(copy=True, norm='max')), ('xgboostclassifier', XGBoostClassifier(booster='gbtree', colsample_bytree=1, eta=0.4, gamma=5, max_depth=10, max_leaves=0, n_estimators=200, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=0.9375, reg_lambda=2.3958333333333335, subsample=0.9, tree_method='auto'))], verbose=False)), ('15', Pipeline(memory=None, steps=[('maxabsscaler', MaxAbsScaler(copy=True)), ('lightgbmclassifier', LightGBMClassifier(boosting_type='goss', colsample_bytree=0.5944444444444444, learning_rate=0.026323157894736843, max_bin=310, max_depth=-1, min_child_weight=3, min_data_in_leaf=1e-05, min_split_gain=0.7894736842105263, n_estimators=50, n_jobs=1, num_leaves=131, problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=None, reg_alpha=0.3684210526315789, reg_lambda=1, subsample=1))], verbose=False)), ('32', Pipeline(memory=None, steps=[('sparsenormalizer', Normalizer(copy=True, norm='max')), ('xgboostclassifier', XGBoostClassifier(booster='gbtree', colsample_bytree=0.9, eta=0.1, gamma=0, max_depth=8, max_leaves=63, n_estimators=400, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=2.0833333333333335, reg_lambda=1.0416666666666667, subsample=0.7, tree_method='auto'))], verbose=False)), ('7', Pipeline(memory=None, steps=[('standardscalerwrapper', StandardScalerWrapper(copy=True, with_mean=False, with_std=False)), ('xgboostclassifier', XGBoostClassifier(booster='gbtree', colsample_bytree=0.5, eta=0.3, gamma=0, max_depth=10, max_leaves=255, n_estimators=10, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=0, reg_lambda=0.10416666666666667, subsample=0.7, tree_method='auto'))], verbose=False))], flatten_transform=False, weights=[0.18181818181818182, 0.18181818181818182, 0.09090909090909091, 0.18181818181818182, 0.18181818181818182, 0.09090909090909091, 0.09090909090909091]))],\n                                       'verbose': False},\n                             y_transformer={},\n                             y_transformer_name='LabelEncoder')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 21,
      "metadata": {
        "gather": {
          "logged": 1718531943606
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "best_model.steps"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 22,
          "data": {
            "text/plain": "[('datatransformer',\n  DataTransformer(enable_dnn=False, enable_feature_sweeping=False, feature_sweeping_config={}, feature_sweeping_timeout=86400, featurization_config=None, force_text_dnn=False, is_cross_validation=False, is_onnx_compatible=True, task='classification')),\n ('prefittedsoftvotingclassifier',\n  PreFittedSoftVotingClassifier(classification_labels=numpy.array([0, 1]), estimators=[('27', Pipeline(memory=None, steps=[('maxabsscaler', MaxAbsScaler(copy=True)), ('lightgbmclassifier', LightGBMClassifier(boosting_type='goss', colsample_bytree=0.8911111111111111, learning_rate=0.03158578947368421, max_bin=280, max_depth=9, min_child_weight=9, min_data_in_leaf=1e-05, min_split_gain=0.2631578947368421, n_estimators=100, n_jobs=1, num_leaves=89, problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=None, reg_alpha=0.10526315789473684, reg_lambda=0.21052631578947367, subsample=1))], verbose=False)), ('31', Pipeline(memory=None, steps=[('standardscalerwrapper', StandardScalerWrapper(copy=True, with_mean=False, with_std=False)), ('xgboostclassifier', XGBoostClassifier(booster='gbtree', colsample_bytree=0.7, eta=0.4, gamma=5, max_depth=6, max_leaves=0, n_estimators=100, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=1.7708333333333335, reg_lambda=1.5625, subsample=0.5, tree_method='auto'))], verbose=False)), ('0', Pipeline(memory=None, steps=[('maxabsscaler', MaxAbsScaler(copy=True)), ('lightgbmclassifier', LightGBMClassifier(min_data_in_leaf=20, n_jobs=1, problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=None))], verbose=False)), ('39', Pipeline(memory=None, steps=[('sparsenormalizer', Normalizer(copy=True, norm='max')), ('xgboostclassifier', XGBoostClassifier(booster='gbtree', colsample_bytree=1, eta=0.4, gamma=5, max_depth=10, max_leaves=0, n_estimators=200, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=0.9375, reg_lambda=2.3958333333333335, subsample=0.9, tree_method='auto'))], verbose=False)), ('15', Pipeline(memory=None, steps=[('maxabsscaler', MaxAbsScaler(copy=True)), ('lightgbmclassifier', LightGBMClassifier(boosting_type='goss', colsample_bytree=0.5944444444444444, learning_rate=0.026323157894736843, max_bin=310, max_depth=-1, min_child_weight=3, min_data_in_leaf=1e-05, min_split_gain=0.7894736842105263, n_estimators=50, n_jobs=1, num_leaves=131, problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=None, reg_alpha=0.3684210526315789, reg_lambda=1, subsample=1))], verbose=False)), ('32', Pipeline(memory=None, steps=[('sparsenormalizer', Normalizer(copy=True, norm='max')), ('xgboostclassifier', XGBoostClassifier(booster='gbtree', colsample_bytree=0.9, eta=0.1, gamma=0, max_depth=8, max_leaves=63, n_estimators=400, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=2.0833333333333335, reg_lambda=1.0416666666666667, subsample=0.7, tree_method='auto'))], verbose=False)), ('7', Pipeline(memory=None, steps=[('standardscalerwrapper', StandardScalerWrapper(copy=True, with_mean=False, with_std=False)), ('xgboostclassifier', XGBoostClassifier(booster='gbtree', colsample_bytree=0.5, eta=0.3, gamma=0, max_depth=10, max_leaves=255, n_estimators=10, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=0, reg_lambda=0.10416666666666667, subsample=0.7, tree_method='auto'))], verbose=False))], flatten_transform=False, weights=[0.18181818181818182, 0.18181818181818182, 0.09090909090909091, 0.18181818181818182, 0.18181818181818182, 0.09090909090909091, 0.09090909090909091]))]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 22,
      "metadata": {
        "gather": {
          "logged": 1718531949007
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Test the Model\n",
        "#### Load Test Data\n",
        "For the test data, it should have the same preparation step as the train data. Otherwise it might get failed at the preprocessing step."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_test = Dataset.Tabular.from_delimited_files(path='https://automlsamplenotebookdata.blob.core.windows.net/automl-sample-notebook-data/bankmarketing_test.csv')\n",
        "df_test = dataset_test.to_pandas_dataframe()\n",
        "df_test = df_test[pd.notnull(df_test['y'])]\n",
        "\n",
        "y_test = df_test['y']\n",
        "X_test = df_test.drop(['y'], axis=1)"
      ],
      "outputs": [],
      "execution_count": 23,
      "metadata": {
        "gather": {
          "logged": 1718531958829
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Testing Our Best Fitted Model\n",
        "\n",
        "We will use confusion matrix to see how our model works."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "ypred = best_model.predict(X_test)\n",
        "cm = confusion_matrix(y_test, ypred)"
      ],
      "outputs": [],
      "execution_count": 24,
      "metadata": {
        "gather": {
          "logged": 1718531962406
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize the confusion matrix\n",
        "pd.DataFrame(cm).style.background_gradient(cmap='Blues', low=0, high=0.9)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 25,
          "data": {
            "text/plain": "<pandas.io.formats.style.Styler at 0x7f4bf1d9c6a0>",
            "text/html": "<style  type=\"text/css\" >\n#T_1db3eb46_2bc7_11ef_b1d9_c1ee8dba4d74row0_col0,#T_1db3eb46_2bc7_11ef_b1d9_c1ee8dba4d74row1_col1{\n            background-color:  #63a8d3;\n            color:  #000000;\n        }#T_1db3eb46_2bc7_11ef_b1d9_c1ee8dba4d74row0_col1,#T_1db3eb46_2bc7_11ef_b1d9_c1ee8dba4d74row1_col0{\n            background-color:  #f7fbff;\n            color:  #000000;\n        }</style><table id=\"T_1db3eb46_2bc7_11ef_b1d9_c1ee8dba4d74\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >0</th>        <th class=\"col_heading level0 col1\" >1</th>    </tr></thead><tbody>\n                <tr>\n                        <th id=\"T_1db3eb46_2bc7_11ef_b1d9_c1ee8dba4d74level0_row0\" class=\"row_heading level0 row0\" >0</th>\n                        <td id=\"T_1db3eb46_2bc7_11ef_b1d9_c1ee8dba4d74row0_col0\" class=\"data row0 col0\" >3540</td>\n                        <td id=\"T_1db3eb46_2bc7_11ef_b1d9_c1ee8dba4d74row0_col1\" class=\"data row0 col1\" >96</td>\n            </tr>\n            <tr>\n                        <th id=\"T_1db3eb46_2bc7_11ef_b1d9_c1ee8dba4d74level0_row1\" class=\"row_heading level0 row1\" >1</th>\n                        <td id=\"T_1db3eb46_2bc7_11ef_b1d9_c1ee8dba4d74row1_col0\" class=\"data row1 col0\" >243</td>\n                        <td id=\"T_1db3eb46_2bc7_11ef_b1d9_c1ee8dba4d74row1_col1\" class=\"data row1 col1\" >241</td>\n            </tr>\n    </tbody></table>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 25,
      "metadata": {
        "gather": {
          "logged": 1718531967521
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Publish and run from REST endpoint\n",
        "\n",
        "Run the following code to publish the pipeline to your workspace. In your workspace in the portal, you can see metadata for the pipeline including run history and durations. You can also run the pipeline manually from the portal.\n",
        "\n",
        "Additionally, publishing the pipeline enables a REST endpoint to rerun the pipeline from any HTTP library on any platform.\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "published_pipeline = pipeline_run.publish_pipeline(\n",
        "    name=\"Bankmarketing Train\", description=\"Training bankmarketing pipeline\", version=\"1.0\")\n",
        "\n",
        "published_pipeline"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 46,
          "data": {
            "text/plain": "Pipeline(Name: Bankmarketing Train,\nId: 59a2f818-8426-44ae-8e85-b73177185150,\nStatus: Active,\nEndpoint: https://westeurope.api.azureml.ms/pipelines/v1.0/subscriptions/f9d5a085-54dc-4215-9ba6-dad5d86e60a0/resourceGroups/aml-quickstarts-260718/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-260718/PipelineRuns/PipelineSubmit/59a2f818-8426-44ae-8e85-b73177185150)",
            "text/html": "<table style=\"width:100%\"><tr><th>Name</th><th>Id</th><th>Status</th><th>Endpoint</th></tr><tr><td>Bankmarketing Train</td><td><a href=\"https://ml.azure.com/pipelines/59a2f818-8426-44ae-8e85-b73177185150?wsid=/subscriptions/f9d5a085-54dc-4215-9ba6-dad5d86e60a0/resourcegroups/aml-quickstarts-260718/workspaces/quick-starts-ws-260718\" target=\"_blank\" rel=\"noopener\">59a2f818-8426-44ae-8e85-b73177185150</a></td><td>Active</td><td><a href=\"https://westeurope.api.azureml.ms/pipelines/v1.0/subscriptions/f9d5a085-54dc-4215-9ba6-dad5d86e60a0/resourceGroups/aml-quickstarts-260718/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-260718/PipelineRuns/PipelineSubmit/59a2f818-8426-44ae-8e85-b73177185150\" target=\"_blank\" rel=\"noopener\">REST Endpoint</a></td></tr></table>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 46,
      "metadata": {
        "gather": {
          "logged": 1718533905865
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Authenticate once again, to retrieve the `auth_header` so that the endpoint can be used"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.authentication import InteractiveLoginAuthentication\n",
        "\n",
        "interactive_auth = InteractiveLoginAuthentication()\n",
        "auth_header = interactive_auth.get_authentication_header()"
      ],
      "outputs": [],
      "execution_count": 47,
      "metadata": {
        "gather": {
          "logged": 1718533909146
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Get the REST url from the endpoint property of the published pipeline object. You can also find the REST url in your workspace in the portal. Build an HTTP POST request to the endpoint, specifying your authentication header. Additionally, add a JSON payload object with the experiment name and the batch size parameter. As a reminder, the process_count_per_node is passed through to ParallelRunStep because you defined it is defined as a PipelineParameter object in the step configuration.\n",
        "\n",
        "Make the request to trigger the run. Access the Id key from the response dict to get the value of the run id.\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(published_pipeline.endpoint)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "https://westeurope.api.azureml.ms/pipelines/v1.0/subscriptions/f9d5a085-54dc-4215-9ba6-dad5d86e60a0/resourceGroups/aml-quickstarts-260718/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-260718/PipelineRuns/PipelineSubmit/59a2f818-8426-44ae-8e85-b73177185150\n"
        }
      ],
      "execution_count": 48,
      "metadata": {
        "gather": {
          "logged": 1718533912817
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "\n",
        "rest_endpoint = published_pipeline.endpoint\n",
        "response = requests.post(rest_endpoint, \n",
        "                         headers=auth_header, \n",
        "                         json={\"ExperimentName\": \"pipeline-rest-endpoint\",\"is_deterministic\": \"False\"}\n",
        "                        )"
      ],
      "outputs": [],
      "execution_count": 49,
      "metadata": {
        "gather": {
          "logged": 1718533918079
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    response.raise_for_status()\n",
        "except Exception:    \n",
        "    raise Exception(\"Received bad response from the endpoint: {}\\n\"\n",
        "                    \"Response Code: {}\\n\"\n",
        "                    \"Headers: {}\\n\"\n",
        "                    \"Content: {}\".format(rest_endpoint, response.status_code, response.headers, response.content))\n",
        "\n",
        "run_id = response.json().get('Id')\n",
        "print('Submitted pipeline run: ', run_id)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Submitted pipeline run:  129744b5-0abd-4955-96d2-635406fd1cf7\n"
        }
      ],
      "execution_count": 50,
      "metadata": {
        "gather": {
          "logged": 1718533920318
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Use the run id to monitor the status of the new run. This will take another 10-15 min to run and will look similar to the previous pipeline run, so if you don't need to see another pipeline run, you can skip watching the full output."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.core.run import PipelineRun\n",
        "from azureml.widgets import RunDetails\n",
        "\n",
        "published_pipeline_run = PipelineRun(ws.experiments[\"pipeline-rest-endpoint\"], run_id)\n",
        "RunDetails(published_pipeline_run).show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_PipelineWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO', …",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "7a3aaee12e3c46138272f8b965e0ea2d"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/runs/129744b5-0abd-4955-96d2-635406fd1cf7?wsid=/subscriptions/f9d5a085-54dc-4215-9ba6-dad5d86e60a0/resourcegroups/aml-quickstarts-260718/workspaces/quick-starts-ws-260718&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\", \"run_id\": \"129744b5-0abd-4955-96d2-635406fd1cf7\", \"run_properties\": {\"run_id\": \"129744b5-0abd-4955-96d2-635406fd1cf7\", \"created_utc\": \"2024-06-16T10:31:58.212874Z\", \"properties\": {\"azureml.runsource\": \"azureml.PipelineRun\", \"runSource\": \"Unavailable\", \"runType\": \"HTTP\", \"azureml.parameters\": \"{}\", \"azureml.continue_on_step_failure\": \"False\", \"azureml.continue_on_failed_optional_input\": \"True\", \"azureml.pipelineid\": \"59a2f818-8426-44ae-8e85-b73177185150\", \"azureml.pipelineComponent\": \"pipelinerun\", \"azureml.pipelines.stages\": \"{\\\"Initialization\\\":null,\\\"Execution\\\":{\\\"StartTime\\\":\\\"2024-06-16T10:31:59.7069238+00:00\\\",\\\"EndTime\\\":\\\"2024-06-16T10:32:01.0570094+00:00\\\",\\\"Status\\\":\\\"Finished\\\"}}\"}, \"tags\": {}, \"end_time_utc\": \"2024-06-16T10:32:01.185605Z\", \"status\": \"Completed\", \"log_files\": {\"logs/azureml/executionlogs.txt\": \"https://mlstrg260718.blob.core.windows.net/azureml/ExperimentRun/dcid.129744b5-0abd-4955-96d2-635406fd1cf7/logs/azureml/executionlogs.txt?sv=2019-07-07&sr=b&sig=92So1BgkjLaaaqGF8BTo2T5McRUmyaL%2FsZ2D7R%2BpJz4%3D&skoid=ae141e04-1351-4788-8c0c-6ebf9d9e306b&sktid=660b3398-b80e-49d2-bc5b-ac1dc93b5254&skt=2024-06-16T08%3A07%3A04Z&ske=2024-06-17T16%3A17%3A04Z&sks=b&skv=2019-07-07&st=2024-06-16T10%3A27%3A24Z&se=2024-06-16T18%3A37%3A24Z&sp=r\", \"logs/azureml/stderrlogs.txt\": \"https://mlstrg260718.blob.core.windows.net/azureml/ExperimentRun/dcid.129744b5-0abd-4955-96d2-635406fd1cf7/logs/azureml/stderrlogs.txt?sv=2019-07-07&sr=b&sig=NyVJZeEdc%2F8W9yO5CIB%2Fw7kM477uB66AHULSolvtjFw%3D&skoid=ae141e04-1351-4788-8c0c-6ebf9d9e306b&sktid=660b3398-b80e-49d2-bc5b-ac1dc93b5254&skt=2024-06-16T08%3A07%3A04Z&ske=2024-06-17T16%3A17%3A04Z&sks=b&skv=2019-07-07&st=2024-06-16T10%3A27%3A24Z&se=2024-06-16T18%3A37%3A24Z&sp=r\", \"logs/azureml/stdoutlogs.txt\": \"https://mlstrg260718.blob.core.windows.net/azureml/ExperimentRun/dcid.129744b5-0abd-4955-96d2-635406fd1cf7/logs/azureml/stdoutlogs.txt?sv=2019-07-07&sr=b&sig=Naz0aMLl2P1zgVS3xd%2BnDhuGYw00%2BP8Ens6J%2F%2FP6NPU%3D&skoid=ae141e04-1351-4788-8c0c-6ebf9d9e306b&sktid=660b3398-b80e-49d2-bc5b-ac1dc93b5254&skt=2024-06-16T08%3A07%3A04Z&ske=2024-06-17T16%3A17%3A04Z&sks=b&skv=2019-07-07&st=2024-06-16T10%3A27%3A24Z&se=2024-06-16T18%3A37%3A24Z&sp=r\"}, \"log_groups\": [[\"logs/azureml/executionlogs.txt\", \"logs/azureml/stderrlogs.txt\", \"logs/azureml/stdoutlogs.txt\"]], \"run_duration\": \"0:00:02\", \"run_number\": \"1718533918\", \"run_queued_details\": {\"status\": \"Finished\", \"details\": null}}, \"child_runs\": [{\"run_id\": \"d2ccc7e8-c0d9-4519-9546-f13031df113e\", \"name\": \"automl_module\", \"status\": \"Finished\", \"start_time\": \"2024-06-16T10:32:00.095631Z\", \"created_time\": \"2024-06-16T10:31:59.815658Z\", \"end_time\": \"2024-06-16T10:32:00.095631Z\", \"duration\": \"0:00:00\", \"run_number\": 1718533919, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2024-06-16T10:31:59.815658Z\", \"is_reused\": \"Yes\"}], \"children_metrics\": {\"categories\": null, \"series\": null, \"metricName\": null}, \"run_metrics\": [], \"run_logs\": \"[2024-06-16 10:32:00Z] Completing processing run id d2ccc7e8-c0d9-4519-9546-f13031df113e.\\n[2024-06-16 10:32:00Z] Finishing experiment: no runs left and nothing to schedule.\\n\\nRun is completed.\", \"graph\": {\"datasource_nodes\": {\"b82a62c0\": {\"node_id\": \"b82a62c0\", \"name\": \"BankMarketing Dataset\"}}, \"module_nodes\": {\"83bc1f6a\": {\"node_id\": \"83bc1f6a\", \"name\": \"automl_module\", \"status\": \"Finished\", \"_is_reused\": true, \"run_id\": \"d2ccc7e8-c0d9-4519-9546-f13031df113e\"}}, \"edges\": [{\"source_node_id\": \"b82a62c0\", \"source_node_name\": \"BankMarketing Dataset\", \"source_name\": \"data\", \"target_name\": \"training_data\", \"dst_node_id\": \"83bc1f6a\", \"dst_node_name\": \"automl_module\"}], \"child_runs\": [{\"run_id\": \"d2ccc7e8-c0d9-4519-9546-f13031df113e\", \"name\": \"automl_module\", \"status\": \"Finished\", \"start_time\": \"2024-06-16T10:32:00.095631Z\", \"created_time\": \"2024-06-16T10:31:59.815658Z\", \"end_time\": \"2024-06-16T10:32:00.095631Z\", \"duration\": \"0:00:00\", \"run_number\": 1718533919, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2024-06-16T10:31:59.815658Z\", \"is_reused\": \"Yes\"}]}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.51.0\"}, \"loading\": false}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 51,
      "metadata": {
        "gather": {
          "logged": 1718533926411
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.train.automl.run import AutoMLRun\n",
        "\n",
        "for step in pipeline_run.get_steps():\n",
        "    if step.properties.get(\"StepType\") == \"AutoMLStep\":\n",
        "        automl_run = AutoMLRun(experiment, step.id)\n",
        "        break\n",
        "\n",
        "best_run = automl_run.get_best_child()\n",
        "best_run_metrics = best_run.get_metrics()\n",
        "print(\"---------------------------------------------------------------------------\")\n",
        "print(f'Run Id: {best_run.id}')\n",
        "print(f'Accuracy: {best_run_metrics[\"accuracy\"]}')\n",
        "print(\"---------------------------------------------------------------------------\")\n",
        "print(\"the onnx model is saved in the outputs directory\")\n",
        "os.makedirs(\"./outputs\", exist_ok = True)\n",
        "best_run.download_file(\"outputs/model.onnx\", \"./outputs/automl_model.onnx\")\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "---------------------------------------------------------------------------\nRun Id: 524adfda-2a15-40af-bec9-998b5b1f3593_46\nAccuracy: 0.91350531107739\n---------------------------------------------------------------------------\nthe onnx model is saved in the outputs directory\n"
        }
      ],
      "execution_count": 38,
      "metadata": {
        "gather": {
          "logged": 1718533488681
        }
      }
    }
  ],
  "metadata": {
    "order_index": 11,
    "exclude_from_index": false,
    "task": "Demonstrates the use of AutoMLStep",
    "deployment": [
      "None"
    ],
    "authors": [
      {
        "name": "sanpil"
      }
    ],
    "star_tag": [
      "featured"
    ],
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "compute": [
      "AML Compute"
    ],
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "tags": [
      "None"
    ],
    "datasets": [
      "Custom"
    ],
    "categories": [
      "how-to-use-azureml",
      "machine-learning-pipelines",
      "intro-to-pipelines"
    ],
    "category": "tutorial",
    "framework": [
      "Automated Machine Learning"
    ],
    "friendly_name": "How to use AutoMLStep with AML Pipelines",
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}